{"version":3,"sources":["src/definition/accessors/IPersistence.ts"],"names":[],"mappings":"","file":"IPersistence.js","sourcesContent":["import { RocketChatAssociationRecord } from '../metadata';\n\n/**\n * Provides an accessor write data to the App's persistent storage.\n * A App only has access to its own persistent storage and does not\n * have access to any other App's.\n */\nexport interface IPersistence {\n    /**\n     * Creates a new record in the App's persistent storage, returning the resulting \"id\".\n     *\n     * @param data the actual data to store, must be an object otherwise it will error out.\n     * @return the resulting record's id\n     */\n    create(data: object): Promise<string>;\n\n    /**\n     * Creates a new record in the App's persistent storage with the associated information\n     * being provided.\n     *\n     * @param data the actual data to store, must be an object otherwise it will error out\n     * @param association the association data which includes the model and record id\n     * @return the resulting record's id\n     */\n    createWithAssociation(data: object, association: RocketChatAssociationRecord): Promise<string>;\n\n    /**\n     * Creates a new record in the App's persistent storage with the data being\n     * associated with more than one Rocket.Chat record.\n     *\n     * @param data the actual data to store, must be an object otherwise it will error out\n     * @param associations an array of association data which includes the model and record id\n     * @return the resulting record's id\n     */\n    createWithAssociations(data: object, associations: Array<RocketChatAssociationRecord>): Promise<string>;\n\n    /**\n     * Updates an existing record with the data provided in the App's persistent storage.\n     * This will throw an error if the record doesn't currently exist or if the data is not an object.\n     *\n     * @param id the data record's id\n     * @param data the actual data to store, must be an object otherwise it will error out\n     * @param upsert whether a record should be created if the id to be updated does not exist\n     * @return the id of the updated/upserted record\n     */\n    update(id: string, data: object, upsert?: boolean): Promise<string>;\n\n    /**\n     * Updates an existing record with the data provided in the App's persistent storage which are\n     * associated with provided information.\n     * This will throw an error if the record doesn't currently exist or if the data is not an object.\n     *\n     * @param association the association record\n     * @param data the actual data to store, must be an object otherwise it will error out\n     * @param upsert whether a record should be created if the id to be updated does not exist\n     * @return the id of the updated/upserted record\n     */\n    updateByAssociation(association: RocketChatAssociationRecord, data: object, upsert?: boolean): Promise<string>;\n\n    /**\n     * Updates an existing record with the data provided in the App's persistent storage which are\n     * associated with more than one Rocket.Chat record.\n     * This will throw an error if the record doesn't currently exist or if the data is not an object.\n     *\n     * @param associations an array of association data which includes the model and record id\n     * @param data the actual data to store, must be an object otherwise it will error out\n     * @param upsert whether a record should be created if the id to be updated does not exist\n     * @return the id of the updated/upserted record\n     */\n    updateByAssociations(associations: Array<RocketChatAssociationRecord>, data: object, upsert?: boolean): Promise<string>;\n\n    /**\n     * Removes a record by the provided id and returns the removed record.\n     *\n     * @param id of the record to remove\n     * @return the data record which was removed\n     */\n    remove(id: string): Promise<object>;\n\n    /**\n     * Removes all of the records in persistent storage which are associated with the provided information.\n     *\n     * @param association the information about the association for the records to be removed\n     * @return the data of the removed records\n     */\n    removeByAssociation(association: RocketChatAssociationRecord): Promise<Array<object>>;\n\n    /**\n     * Removes all of the records in persistent storage which are associated with the provided information.\n     * More than one association acts like an AND which means a record in persistent storage must have all\n     * of the associations to be considered a match.\n     *\n     * @param associations the information about the associations for the records to be removed\n     * @return the data of the removed records\n     */\n    removeByAssociations(associations: Array<RocketChatAssociationRecord>): Promise<Array<object>>;\n}\n"]}