{"version":3,"sources":["src/definition/accessors/IPersistenceRead.ts"],"names":[],"mappings":"","file":"IPersistenceRead.js","sourcesContent":["import { RocketChatAssociationRecord } from '../metadata';\n\n/**\n * Provides a read-only accessor for the App's persistent storage.\n * A App only has access to its own persistent storage and does not\n * have access to any other App's.\n */\nexport interface IPersistenceRead {\n    /**\n     * Retrieves a record from the App's persistent storage by the provided id.\n     * A \"falsey\" value (undefined or null or false) is returned should nothing exist\n     * in the storage by the provided id.\n     *\n     * @param id the record to get's id\n     * @return the record if it exists, falsey if not\n     */\n    read(id: string): Promise<object>;\n\n    /**\n     * Retrieves a record from the App's persistent storage by the provided id.\n     * An empty array is returned should there be no records associated with the\n     * data provided.\n     *\n     * @param association the association record to query the persistent storage for\n     * @return array of the records if any exists, empty array if none exist\n     */\n    readByAssociation(association: RocketChatAssociationRecord): Promise<Array<object>>;\n\n    /**\n     * Retrieves a record from the App's persistent storage by the provided id.\n     * Providing more than one association record acts like an AND which means a record\n     * in persistent storage must have all of the associations to be considered a match.\n     * An empty array is returned should there be no records associated with the\n     * data provided.\n     *\n     * @param associations the association records to query the persistent storage for\n     * @return array of the records if any exists, empty array if none exist\n     */\n    readByAssociations(associations: Array<RocketChatAssociationRecord>): Promise<Array<object>>;\n}\n"]}