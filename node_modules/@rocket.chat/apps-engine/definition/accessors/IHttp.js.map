{"version":3,"sources":["src/definition/accessors/IHttp.ts"],"names":[],"mappings":";;AAiBA,IAAY,aAQX;AARD,WAAY,aAAa;IACrB,4BAAW,CAAA;IACX,8BAAa,CAAA;IACb,4BAAW,CAAA;IACX,kCAAiB,CAAA;IACjB,8BAAa,CAAA;IACb,oCAAmB,CAAA;IACnB,gCAAe,CAAA;AACnB,CAAC,EARW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAQxB;AA6GD,IAAY,cA2CT;AA3CH,WAAY,cAAc;IACtB,6DAAc,CAAA;IACd,mFAAyB,CAAA;IACzB,iDAAQ,CAAA;IACR,2DAAa,CAAA;IACb,6DAAc,CAAA;IACd,uGAAmC,CAAA;IACnC,iEAAgB,CAAA;IAChB,uEAAmB,CAAA;IACnB,2EAAqB,CAAA;IACrB,6EAAsB,CAAA;IACtB,+EAAuB,CAAA;IACvB,uDAAW,CAAA;IACX,+DAAe,CAAA;IACf,qEAAkB,CAAA;IAClB,+DAAe,CAAA;IACf,iFAAwB,CAAA;IACxB,mEAAiB,CAAA;IACjB,qEAAkB,CAAA;IAClB,6EAAsB,CAAA;IACtB,+DAAe,CAAA;IACf,+DAAe,CAAA;IACf,iFAAwB,CAAA;IACxB,yEAAoB,CAAA;IACpB,uGAAmC,CAAA;IACnC,2EAAqB,CAAA;IACrB,6DAAc,CAAA;IACd,qDAAU,CAAA;IACV,2EAAqB,CAAA;IACrB,mFAAyB,CAAA;IACzB,6FAA8B,CAAA;IAC9B,qFAA0B,CAAA;IAC1B,yFAA4B,CAAA;IAC5B,2GAAqC,CAAA;IACrC,iFAAwB,CAAA;IACxB,qFAA0B,CAAA;IAC1B,+EAAuB,CAAA;IACvB,uFAA2B,CAAA;IAC3B,2EAAqB,CAAA;IACrB,mEAAiB,CAAA;IACjB,mFAAyB,CAAA;IACzB,2EAAqB,CAAA;IACrB,iGAAgC,CAAA;AAClC,CAAC,EA3CS,cAAc,GAAd,sBAAc,KAAd,sBAAc,QA2CvB","file":"IHttp.js","sourcesContent":["import { IPersistence } from './IPersistence';\nimport { IRead } from './IRead';\n\n/**\n * The Http package allows users to call out to an external web service.\n * Based off of: https://github.com/meteor-typings/meteor/blob/master/1.4/main.d.ts#L869\n */\nexport interface IHttp {\n    get(url: string, options?: IHttpRequest): Promise<IHttpResponse>;\n\n    post(url: string, options?: IHttpRequest): Promise<IHttpResponse>;\n\n    put(url: string, options?: IHttpRequest): Promise<IHttpResponse>;\n\n    del(url: string, options?: IHttpRequest): Promise<IHttpResponse>;\n}\n\nexport enum RequestMethod {\n    GET = 'get',\n    POST = 'post',\n    PUT = 'put',\n    DELETE = 'delete',\n    HEAD = 'head',\n    OPTIONS = 'options',\n    PATCH = 'patch',\n}\n\nexport interface IHttpRequest {\n    content?: string;\n    data?: any;\n    query?: string;\n    params?: {\n        [key: string]: string,\n    };\n    auth?: string;\n    headers?: {\n        [key: string]: string,\n    };\n    timeout?: number;\n}\n\nexport interface IHttpResponse {\n    url: string;\n    method: RequestMethod;\n    statusCode: number;\n    headers?: {\n        [key: string]: string,\n    };\n    content?: string;\n    data?: any;\n}\n\nexport interface IHttpExtend {\n    /**\n     * A method for providing a single header which is added to every request.\n     *\n     * @param key the name of the header\n     * @param value the header's content\n     */\n    provideDefaultHeader(key: string, value: string): void;\n\n    /**\n     * A method for providing more than one header which are added to every request.\n     *\n     * @param headers an object with strings as the keys (header name) and strings as values (header content)\n     */\n    provideDefaultHeaders(headers: { [key: string]: string }): void;\n\n    /**\n     * A method for providing a single query parameter which is added to every request.\n     *\n     * @param key the name of the query parameter\n     * @param value the query parameter's content\n     */\n    provideDefaultParam(key: string, value: string): void;\n\n    /**\n     * A method for providing more than one query parameters which are added to every request.\n     *\n     * @param headers an object with strings as the keys (parameter name) and strings as values (parameter content)\n     */\n    provideDefaultParams(params: { [key: string]: string }): void;\n\n    /**\n     * Method for providing a function which is called before every request is called out to the final destination.\n     * This can be called more than once which means there can be more than one handler. The order provided is the order called.\n     * Note: if this handler throws an error when it is executed then the request will be aborted.\n     *\n     * @param handler the instance of the IHttpPreRequestHandler\n     */\n    providePreRequestHandler(handler: IHttpPreRequestHandler): void;\n\n    /**\n     * Method for providing a function which is called after every response is got from the url and before the result is returned.\n     * This can be called more than once which means there can be more than one handler. The order provided is the order called.\n     * Note: if this handler throws an error when it is executed then the respone will not be returned\n     *\n     * @param handler the instance of the IHttpPreResponseHandler\n     */\n    providePreResponseHandler(handler: IHttpPreResponseHandler): void;\n\n    /**\n     * A method for getting all of the default headers provided, the value is a readonly and any modifications done will be ignored.\n     * Please use the provider methods for adding them.\n     */\n    getDefaultHeaders(): Map<string, string>;\n\n    /**\n     * A method for getting all of the default parameters provided, the value is a readonly and any modifications done will be ignored.\n     * Please use the provider methods for adding them.\n     */\n    getDefaultParams(): Map<string, string>;\n\n    /**\n     * A method for getting all of the pre-request handlers provided, the value is a readonly and any modifications done will be ignored.\n     * Please use the provider methods for adding them.\n     */\n    getPreRequestHandlers(): Array<IHttpPreRequestHandler>;\n\n    /**\n     * A method for getting all of the pre-response handlers provided, the value is a readonly and any modifications done will be ignored.\n     * Please use the provider methods for adding them.\n     */\n    getPreResponseHandlers(): Array<IHttpPreResponseHandler>;\n}\n\nexport interface IHttpPreRequestHandler {\n    executePreHttpRequest(url: string, request: IHttpRequest, read: IRead, persistence: IPersistence): Promise<IHttpRequest>;\n}\n\nexport interface IHttpPreResponseHandler {\n    executePreHttpResponse(response: IHttpResponse, read: IRead, persistence: IPersistence): Promise<IHttpResponse>;\n}\n\nexport enum HttpStatusCode {\n    CONTINUE = 100,\n    SWITCHING_PROTOCOLS = 101,\n    OK = 200,\n    CREATED = 201,\n    ACCEPTED = 202,\n    NON_AUTHORITATIVE_INFORMATION = 203,\n    NO_CONTENT = 204,\n    RESET_CONTENT = 205,\n    PARTIAL_CONTENT = 206,\n    MULTIPLE_CHOICES = 300,\n    MOVED_PERMANENTLY = 301,\n    FOUND = 302,\n    SEE_OTHER = 303,\n    NOT_MODIFIED = 304,\n    USE_PROXY = 305,\n    TEMPORARY_REDIRECT = 307,\n    BAD_REQUEST = 400,\n    UNAUTHORIZED = 401,\n    PAYMENT_REQUIRED = 402,\n    FORBIDDEN = 403,\n    NOT_FOUND = 404,\n    METHOD_NOT_ALLOWED = 405,\n    NOT_ACCEPTABLE = 406,\n    PROXY_AUTHENTICATION_REQUIRED = 407,\n    REQUEST_TIMEOUT = 408,\n    CONFLICT = 409,\n    GONE = 410,\n    LENGTH_REQUIRED = 411,\n    PRECONDITION_FAILED = 412,\n    REQUEST_ENTITY_TOO_LARGE = 413,\n    REQUEST_URI_TOO_LONG = 414,\n    UNSUPPORTED_MEDIA_TYPE = 415,\n    REQUESTED_RANGE_NOT_SATISFIABLE = 416,\n    EXPECTATION_FAILED = 417,\n    UNPROCESSABLE_ENTITY = 422,\n    TOO_MANY_REQUESTS = 429,\n    INTERNAL_SERVER_ERROR = 500,\n    NOT_IMPLEMENTED = 501,\n    BAD_GATEWAY = 502,\n    SERVICE_UNAVAILABLE = 503,\n    GATEWAY_TIMEOUT = 504,\n    HTTP_VERSION_NOT_SUPPORTED = 505,\n  }\n"]}