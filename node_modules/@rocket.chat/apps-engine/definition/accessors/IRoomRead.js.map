{"version":3,"sources":["src/definition/accessors/IRoomRead.ts"],"names":[],"mappings":"","file":"IRoomRead.js","sourcesContent":["import { IMessage } from '../messages/index';\nimport { IRoom } from '../rooms/index';\nimport { IUser } from '../users/index';\n\n/**\n * This accessor provides methods for accessing\n * rooms in a read-only-fashion.\n */\nexport interface IRoomRead {\n    /**\n     * Gets a room by an id.\n     *\n     * @param id the id of the room\n     * @returns the room\n     */\n    getById(id: string): Promise<IRoom | undefined>;\n\n    /**\n     * Gets just the creator of the room by the room's id.\n     *\n     * @param id the id of the room\n     * @returns the creator of the room\n     */\n    getCreatorUserById(id: string): Promise<IUser | undefined>;\n\n    /**\n     * Gets a room by its name.\n     *\n     * @param name the name of the room\n     * @returns the room\n     */\n    getByName(name: string): Promise<IRoom | undefined>;\n\n    /**\n     * Gets just the creator of the room by the room's name.\n     *\n     * @param name the name of the room\n     * @returns the creator of the room\n     */\n    getCreatorUserByName(name: string): Promise<IUser | undefined>;\n\n    /**\n     * Gets an iterator for all of the messages in the provided room.\n     *\n     * @param roomId the room's id\n     * @returns an iterator for messages\n     */\n    getMessages(roomId: string): Promise<IterableIterator<IMessage>>;\n\n    /**\n     * Gets an iterator for all of the users in the provided room.\n     *\n     * @param roomId the room's id\n     * @returns an iterator for the users in the room\n     */\n    getMembers(roomId: string): Promise<Array<IUser>>;\n\n    /**\n     * Gets a direct room with all usernames\n     * @param usernames all usernames belonging to the direct room\n     * @returns the room\n     */\n    getDirectByUsernames(usernames: Array<string>): Promise<IRoom>;\n}\n"]}