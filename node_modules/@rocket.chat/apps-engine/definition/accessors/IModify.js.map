{"version":3,"sources":["src/definition/accessors/IModify.ts"],"names":[],"mappings":"","file":"IModify.js","sourcesContent":["import { IMessage, IMessageAttachment } from '../messages';\nimport { RocketChatAssociationModel } from '../metadata';\nimport { IRoom, RoomType } from '../rooms';\nimport { IUser } from '../users';\n\nexport interface IModify {\n    getCreator(): IModifyCreator;\n\n    getExtender(): IModifyExtender;\n\n    getUpdater(): IModifyUpdater;\n\n    /**\n     * Gets the accessor for sending notifications to a user or users in a room.\n     *\n     * @returns the notifier accessor\n     */\n    getNotifier(): INotifier;\n}\n\nexport interface INotifier {\n    /**\n     * Notifies the provided user of the provided message.\n     *\n     * **Note**: Notifications only are shown to the user if they are\n     * online and it only stays around for the duration of their session.\n     *\n     * @param user The user who should be notified\n     * @param message The message with the content to notify the user about\n     */\n    notifyUser(user: IUser, message: IMessage): Promise<void>;\n\n    /**\n     * Notifies all of the users in the provided room.\n     *\n     * **Note**: Notifications only are shown to those online\n     * and it only stays around for the duration of their session.\n     *\n     * @param room The room which to notify the users in\n     * @param message The message content to notify users about\n     */\n    notifyRoom(room: IRoom, message: IMessage): Promise<void>;\n\n    /** Gets a new message builder for building a notification message. */\n    getMessageBuilder(): IMessageBuilder;\n}\n\nexport interface IModifyUpdater {\n    /**\n     * Modifies an existing message.\n     * Raises an exception if a non-existent messageId is supplied\n     *\n     * @param messageId the id of the existing message to modfiy and build\n     * @param updater the user who is updating the message\n     */\n    message(messageId: string, updater: IUser): Promise<IMessageBuilder>;\n\n    /**\n     * Modifies an existing room.\n     * Raises an exception if a non-existent roomId is supplied\n     *\n     * @param roomId the id of the existing room to modify and build\n     * @param updater the user who is updating the room\n     */\n    room(roomId: string, updater: IUser): Promise<IRoomBuilder>;\n\n    /**\n     * Finishes the updating process, saving the object to the database.\n     * Note: If there is an issue or error while updating, this will throw an error.\n     *\n     * @param builder the builder instance\n     */\n    finish(builder: IMessageBuilder | IRoomBuilder): Promise<void>;\n}\n\nexport interface IModifyExtender {\n    /**\n     * Modifies a message in a non-destructive way: Properties can be added to it,\n     * but existing properties cannot be changed.\n     *\n     * @param messageId the id of the message to be extended\n     * @param updater the user who is updating/extending the message\n     * @return the extender instance for the message\n     */\n    extendMessage(messageId: string, updater: IUser): Promise<IMessageExtender>;\n\n    /**\n     * Modifies a room in a non-destructive way: Properties can be added to it,\n     * but existing properties cannot be changed.\n     *\n     * @param roomId the id of the room to be extended\n     * @param updater the user who is updating/extending the room\n     * @return the extender instance for the room\n     */\n    extendRoom(roomId: string, updater: IUser): Promise<IRoomExtender>;\n\n    /**\n     * Finishes the extending process, saving the object to the database.\n     * Note: If there is an issue or error while updating, this will throw an error.\n     *\n     * @param extender the extender instance\n     */\n    finish(extender: IRoomExtender | IMessageExtender): Promise<void>;\n}\n\nexport interface IModifyCreator {\n    /**\n     * Starts the process for building a new message object.\n     *\n     * @param data (optional) the initial data to pass into the builder,\n     *          the `id` property will be ignored\n     * @return an IMessageBuilder instance\n     */\n    startMessage(data?: IMessage): IMessageBuilder;\n\n    /**\n     * Starts the process for building a new room.\n     *\n     * @param data (optional) the initial data to pass into the builder,\n     *          the `id` property will be ignored\n     * @return an IRoomBuilder instance\n     */\n    startRoom(data?: IRoom): IRoomBuilder;\n\n    /**\n     * Finishes the creating process, saving the object to the database.\n     *\n     * @param builder the builder instance\n     * @return the resulting `id` of the resulting object\n     */\n    finish(builder: IMessageBuilder | IRoomBuilder): Promise<string>;\n}\n\nexport interface IMessageExtender {\n    kind: RocketChatAssociationModel.MESSAGE;\n\n    /**\n     * Adds a custom field to the message.\n     * Note: This key can not already exist or it will throw an error.\n     * Note: The key must not contain a period in it, an error will be thrown.\n     *\n     * @param key the name of the custom field\n     * @param value the value of this custom field\n     */\n    addCustomField(key: string, value: any): IMessageExtender;\n\n    /**\n     * Adds a single attachment to the message.\n     *\n     * @param attachment the item to add\n     */\n    addAttachment(attachment: IMessageAttachment): IMessageExtender;\n\n    /**\n     * Adds all of the provided attachments to the message.\n     *\n     * @param attachments an array of attachments\n     */\n    addAttachments(attachments: Array<IMessageAttachment>): IMessageExtender;\n\n    /**\n     * Gets the resulting message that has been extended at the point of calling it.\n     * Note: modifying the returned value will have no effect.\n     */\n    getMessage(): IMessage;\n}\n\nexport interface IRoomExtender {\n    kind: RocketChatAssociationModel.ROOM;\n\n    /**\n     * Adds a custom field to the room.\n     * Note: This key can not already exist or it will throw an error.\n     * Note: The key must not contain a period in it, an error will be thrown.\n     *\n     * @param key the name of the custom field\n     * @param value the value of this custom field\n     */\n    addCustomField(key: string, value: any): IRoomExtender;\n\n    /**\n     * Adds a user to the room.\n     *\n     * @param user the user which is to be added to the room\n     */\n    addMember(user: IUser): IRoomExtender;\n\n    /**\n     * Get a list of users being added to the room.\n     */\n    getMembersBeingAdded(): Array<IUser>;\n\n    /**\n     * Get a list of usernames of users being added to the room.\n     */\n    getUsernamesOfMembersBeingAdded(): Array<string>;\n\n    /**\n     * Gets the resulting room that has been extended at the point of calling this.\n     * Note: modifying the returned value will have no effect.\n     */\n    getRoom(): IRoom;\n}\n\n/**\n * Interface for building out a message.\n * Please note, that a room and sender must be associated otherwise you will NOT\n * be able to successfully save the message object.\n */\nexport interface IMessageBuilder {\n    kind: RocketChatAssociationModel.MESSAGE;\n\n    /**\n     * Provides a convient way to set the data for the message.\n     * Note: Providing an \"id\" field here will be ignored.\n     *\n     * @param message the message data to set\n     */\n    setData(message: IMessage): IMessageBuilder;\n\n    /**\n     * Sets the room where this message should be sent to.\n     *\n     * @param room the room where to send\n     */\n    setRoom(room: IRoom): IMessageBuilder;\n\n    /**\n     * Gets the room where this message was sent to.\n     */\n    getRoom(): IRoom;\n\n    /**\n     * Sets the sender of this message.\n     *\n     * @param sender the user sending the message\n     */\n    setSender(sender: IUser): IMessageBuilder;\n\n    /**\n     * Gets the User which sent the message.\n     */\n    getSender(): IUser;\n\n    /**\n     * Sets the text of the message.\n     *\n     * @param text the actual text\n     */\n    setText(text: string): IMessageBuilder;\n\n    /**\n     * Gets the message text.\n     */\n    getText(): string;\n\n    /**\n     * Sets the emoji to use for the avatar, this overwrites the current avatar\n     * whether it be the user's or the avatar url provided.\n     *\n     * @param emoji the emoji code\n     */\n    setEmojiAvatar(emoji: string): IMessageBuilder;\n\n    /**\n     * Gets the emoji used for the avatar.\n     */\n    getEmojiAvatar(): string;\n\n    /**\n     * Sets the url which to display for the avatar, this overwrites the current\n     * avatar whether it be the user's or an emoji one.\n     *\n     * @param avatarUrl image url to use as the avatar\n     */\n    setAvatarUrl(avatarUrl: string): IMessageBuilder;\n\n    /**\n     * Gets the url used for the avatar.\n     */\n    getAvatarUrl(): string;\n\n    /**\n     * Sets the display text of the sender's username that is visible.\n     *\n     * @param alias the username alias to display\n     */\n    setUsernameAlias(alias: string): IMessageBuilder;\n\n    /**\n     * Gets the display text of the sender's username that is visible.\n     */\n    getUsernameAlias(): string;\n\n    /**\n     * Adds one attachment to the message's list of attachments, this will not\n     * overwrite any existing ones but just adds.\n     *\n     * @param attachment the attachment to add\n     */\n    addAttachment(attachment: IMessageAttachment): IMessageBuilder;\n\n    /**\n     * Sets the attachments for the message, replacing and destroying all of the current attachments.\n     *\n     * @param attachments array of the attachments\n     */\n    setAttachments(attachments: Array<IMessageAttachment>): IMessageBuilder;\n\n    /**\n     * Gets the attachments array for the message\n     */\n    getAttachments(): Array<IMessageAttachment>;\n\n    /**\n     * Replaces an attachment at the given position (index).\n     * If there is no attachment at that position, there will be an error thrown.\n     *\n     * @param position the index of the attachment to replace\n     * @param attachment the attachment to replace with\n     */\n    replaceAttachment(position: number, attachment: IMessageAttachment): IMessageBuilder;\n\n    /**\n     * Removes an attachment at the given position (index).\n     * If there is no attachment at that position, there will be an error thrown.\n     *\n     * @param position the index of the attachment to remove\n     */\n    removeAttachment(position: number): IMessageBuilder;\n\n    /**\n     * Sets the user who is editing this message.\n     * This is required if you are modifying an existing message.\n     *\n     * @param user the editor\n     */\n    setEditor(user: IUser): IMessageBuilder;\n\n    /**\n     * Gets the user who edited the message\n     */\n    getEditor(): IUser;\n\n    /**\n     * Sets whether this message can group with others.\n     * This is desirable if you want to avoid confusion with other integrations.\n     *\n     * @param groupable whether this message can group with others\n     */\n    setGroupable(groupable: boolean): IMessageBuilder;\n\n    /**\n     * Gets whether this message can group with others.\n     */\n    getGroupable(): boolean;\n\n    /**\n     * Sets whether this message should have any URLs in the text\n     * parsed by Rocket.Chat and get the details added to the message's\n     * attachments.\n     *\n     * @param parseUrls whether URLs should be parsed in this message\n     */\n    setParseUrls(parseUrls: boolean): IMessageBuilder;\n\n    /**\n     * Gets whether this message should have its URLs parsed\n     */\n    getParseUrls(): boolean;\n\n    /**\n     * Gets the resulting message that has been built up to the point of calling it.\n     *\n     * *Note:* This will error out if the Room has not been defined.\n     */\n    getMessage(): IMessage;\n}\n\n/**\n * Interface for building out a room.\n * Please note, a room creator, name, and type must be set otherwise you will NOT\n * be able to successfully save the room object.\n */\nexport interface IRoomBuilder {\n    kind: RocketChatAssociationModel.ROOM;\n\n    /**\n     * Provides a convient way to set the data for the room.\n     * Note: Providing an \"id\" field here will be ignored.\n     *\n     * @param room the room data to set\n     */\n    setData(room: IRoom): IRoomBuilder;\n\n    /**\n     * Sets the display name of this room.\n     *\n     * @param name the display name of the room\n     */\n    setDisplayName(name: string): IRoomBuilder;\n\n    /**\n     * Gets the display name of this room.\n     */\n    getDisplayName(): string;\n\n    /**\n     * Sets the slugified name of this room, it must align to the rules of Rocket.Chat room\n     * names otherwise there will be an error thrown (no spaces, special characters, etc).\n     *\n     * @param name the slugified name\n     */\n    setSlugifiedName(name: string): IRoomBuilder;\n\n    /**\n     * Gets the slugified name of this room.\n     */\n    getSlugifiedName(): string;\n\n    /**\n     * Sets the room's type.\n     *\n     * @param type the room type\n     */\n    setType(type: RoomType): IRoomBuilder;\n\n    /**\n     * Gets the room's type.\n     */\n    getType(): RoomType;\n\n    /**\n     * Sets the creator of the room.\n     *\n     * @param creator the user who created the room\n     */\n    setCreator(creator: IUser): IRoomBuilder;\n\n    /**\n     * Gets the room's creator.\n     */\n    getCreator(): IUser;\n\n    /**\n     * Adds a user to the room, these are by username until further notice.\n     *\n     * @param username the user's username to add to the room\n     * @deprecated in favor of `addMemberByUsername`. This method will be removed on version 2.0.0\n     */\n    addUsername(username: string): IRoomBuilder;\n\n    /**\n     * Sets the usernames of who are joined to the room.\n     *\n     * @param usernames the list of usernames\n     * @deprecated in favor of `setMembersByUsernames`. This method will be removed on version 2.0.0\n     */\n    setUsernames(usernames: Array<string>): IRoomBuilder;\n\n    /**\n     * Gets the usernames of users in the room.\n     * @deprecated in favor of `getMembersUsernames`. This method will be removed on version 2.0.0\n     */\n    getUsernames(): Array<string>;\n\n    /**\n     * Adds a member to the room by username\n     *\n     * @param username the user's username to add to the room\n     */\n    addMemberToBeAddedByUsername(username: string): IRoomBuilder;\n\n    /**\n     * Sets a list of members to the room by usernames\n     *\n     * @param usernames the list of usernames\n     */\n    setMembersToBeAddedByUsernames(usernames: Array<string>): IRoomBuilder;\n\n    /**\n     * Gets the list of usernames of the members who are been added to the room\n     */\n    getMembersToBeAddedUsernames(): Array<string>;\n\n    /**\n     * Sets whether this room should be a default room or not.\n     * This means that new users will automatically join this room\n     * when they join the server.\n     *\n     * @param isDefault room should be default or not\n     */\n    setDefault(isDefault: boolean): IRoomBuilder;\n\n    /**\n     * Gets whether this room is a default room or not.\n     */\n    getIsDefault(): boolean;\n\n    /**\n     * Sets whether this room should be in read only state or not.\n     * This means that users without the required permission to talk when\n     * a room is muted will not be able to talk but instead will only be\n     * able to read the contents of the room.\n     *\n     * @param isReadOnly whether it should be read only or not\n     */\n    setReadOnly(isReadOnly: boolean): IRoomBuilder;\n\n    /**\n     * Gets whether this room is on read only state or not.\n     */\n    getIsReadOnly(): boolean;\n\n    /**\n     * Sets whether this room should display the system messages (like user join, etc)\n     * or not. This means that whenever a system event, such as joining or leaving, happens\n     * then Rocket.Chat won't send the message to the channel.\n     *\n     * @param displaySystemMessages whether the messages should display or not\n     */\n    setDisplayingOfSystemMessages(displaySystemMessages: boolean): IRoomBuilder;\n\n    /**\n     * Gets whether this room should display the system messages or not.\n     */\n    getDisplayingOfSystemMessages(): boolean;\n\n    /**\n     * Adds a custom field to the room.\n     * Note: This will replace an existing field with the same key should it exist already.\n     *\n     * @param key the name of the key\n     * @param value the value of the custom field\n     */\n    addCustomField(key: string, value: object): IRoomBuilder;\n\n    /**\n     * Sets the entire custom field property to an object provided. This will overwrite\n     * every existing key/values which are unrecoverable.\n     *\n     * @param fields the data to set\n     */\n    setCustomFields(fields: { [key: string]: object }): IRoomBuilder;\n\n    /**\n     * Gets the custom field property of the room.\n     */\n    getCustomFields(): { [key: string]: object };\n\n    /**\n     * Gets the resulting room that has been built up to the point of calling this method.\n     * Note: modifying the returned value will have no effect.\n     */\n    getRoom(): IRoom;\n}\n"]}