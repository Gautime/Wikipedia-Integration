{"version":3,"sources":["src/definition/accessors/IServerSettingRead.ts"],"names":[],"mappings":"","file":"IServerSettingRead.js","sourcesContent":["import { ISetting } from '../settings/ISetting';\n\n/**\n * Reader for the settings inside of the server (Rocket.Chat).\n * Only a subset of them are exposed to Apps.\n */\nexport interface IServerSettingRead {\n    /**\n     * Gets a server setting by id.\n     * Please note: a error will be thrown if not found\n     * or trying to access one that isn't exposed.\n     *\n     * @param id the id of the setting to get\n     * @return the setting\n     */\n    getOneById(id: string): Promise<ISetting>;\n\n    /**\n     * Gets a server setting's value by id.\n     * Please note: a error will be thrown if not found\n     * or trying to access one that isn't exposed.\n     *\n     * @param id the id of the setting to get\n     * @return the setting's value\n     */\n    getValueById(id: string): Promise<any>;\n\n    /**\n     * Gets all of the server settings which are exposed\n     * to the Apps.\n     *\n     * @return an iterator of the exposed settings\n     */\n    getAll(): Promise<IterableIterator<ISetting>>;\n\n    /**\n     * Checks if the server setting for the id provided is readable,\n     * will return true or false and won't throw an error.\n     *\n     * @param id the server setting id\n     */\n    isReadableById(id: string): Promise<boolean>;\n}\n"]}