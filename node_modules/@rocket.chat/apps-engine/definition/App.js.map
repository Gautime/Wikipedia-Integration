{"version":3,"sources":["src/definition/App.ts"],"names":[],"mappings":";;;;;;;;;;AASA,2CAAwC;AAMxC;IAGI;;;;;OAKG;IACH,YAAuC,IAAc,EAAmB,MAAe,EAAmB,SAAyB;QAA5F,SAAI,GAAJ,IAAI,CAAU;QAAmB,WAAM,GAAN,MAAM,CAAS;QAAmB,cAAS,GAAT,SAAS,CAAgB;QAR3H,WAAM,GAAc,qBAAS,CAAC,OAAO,CAAC;QAS1C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,uBAAuB,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EACvE,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,8BAA8B,IAAI,CAAC,IAAI,CAAC,kBAAkB,GAAG,EAClF,cAAc,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;QAE3C,IAAI,CAAC,SAAS,CAAC,qBAAS,CAAC,WAAW,CAAC,CAAC;IAC1C,CAAC;IAEM,SAAS;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACI,OAAO;QACV,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACI,WAAW;QACd,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;IAC9B,CAAC;IAED;;;;OAIG;IACI,KAAK;QACR,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;IACxB,CAAC;IAED;;;;OAIG;IACI,UAAU;QACb,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACI,cAAc;QACjB,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC;IACjC,CAAC;IAED;;;;;OAKG;IACI,qBAAqB;QACxB,OAAO,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC;IACxC,CAAC;IAED;;;;OAIG;IACI,aAAa;QAChB,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACI,OAAO;QACV,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAED;;;;OAIG;IACI,SAAS;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAEM,YAAY;QACf,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAED;;;OAGG;IACU,UAAU,CAAC,mBAAyC,EAAE,eAAiC;;YAChG,MAAM,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,EAAE,eAAe,CAAC,CAAC;QACzE,CAAC;KAAA;IAED;;;;;;;;OAQG;IACU,QAAQ,CAAC,WAA6B,EAAE,mBAAyC;;YAC1F,OAAO,IAAI,CAAC;QAChB,CAAC;KAAA;IAED;;;OAGG;IACU,SAAS,CAAC,mBAAyC;;YAC5D,OAAO;QACX,CAAC;KAAA;IAED;;;;;;;;OAQG;IACU,gBAAgB,CAAC,OAAiB,EAAE,mBAAyC,EAAE,IAAW,EAAE,IAAW;;YAChH,OAAO;QACX,CAAC;KAAA;IAED;;;OAGG;IACa,mBAAmB,CAAC,aAAmC,EAAE,eAAiC;;YACtG,OAAO;QACX,CAAC;KAAA;IAED;;;;OAIG;IACa,SAAS,CAAC,MAAiB;;YACvC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,sBAAuB,MAAO,EAAE,CAAC,CAAC;YACpD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACzB,CAAC;KAAA;CACJ;AAtKD,kBAsKC","file":"App.js","sourcesContent":["import {\n    IAppAccessors,\n    IConfigurationExtend,\n    IConfigurationModify,\n    IEnvironmentRead,\n    IHttp,\n    ILogger,\n    IRead,\n} from './accessors';\nimport { AppStatus } from './AppStatus';\nimport { IApp } from './IApp';\nimport { IAppAuthorInfo } from './metadata/IAppAuthorInfo';\nimport { IAppInfo } from './metadata/IAppInfo';\nimport { ISetting } from './settings';\n\nexport abstract class App implements IApp {\n    private status: AppStatus = AppStatus.UNKNOWN;\n\n    /**\n     * Create a new App, this is called whenever the server starts up and initiates the Apps.\n     * Note, your implementation of this class should call `super(name, id, version)` so we have it.\n     * Also, please use the `initialize()` method to do items instead of the constructor as the constructor\n     * *might* be called more than once but the `initialize()` will only be called once.\n     */\n    protected constructor(private readonly info: IAppInfo, private readonly logger: ILogger, private readonly accessors?: IAppAccessors) {\n        this.logger.debug(`Constructed the App ${this.info.name} (${this.info.id})`,\n            `v${this.info.version} which depends on the API v${this.info.requiredApiVersion}!`,\n            `Created by ${this.info.author.name}`);\n\n        this.setStatus(AppStatus.CONSTRUCTED);\n    }\n\n    public getStatus(): AppStatus {\n        return this.status;\n    }\n\n    /**\n     * Get the name of this App.\n     *\n     * @return {string} the name\n     */\n    public getName(): string {\n        return this.info.name;\n    }\n\n    /**\n     * Gets the sluggified name of this App.\n     *\n     * @return {string} the name slugged\n     */\n    public getNameSlug(): string {\n        return this.info.nameSlug;\n    }\n\n    /**\n     * Get the ID of this App, please see <link> for how to obtain an ID for your App.\n     *\n     * @return {number} the ID\n     */\n    public getID(): string {\n        return this.info.id;\n    }\n\n    /**\n     * Get the version of this App, using http://semver.org/.\n     *\n     * @return {string} the version\n     */\n    public getVersion(): string {\n        return this.info.version;\n    }\n\n    /**\n     * Get the description of this App, mostly used to show to the clients/administrators.\n     *\n     * @return {string} the description\n     */\n    public getDescription(): string {\n        return this.info.description;\n    }\n\n    /**\n     * Gets the API Version which this App depends on (http://semver.org/).\n     * This property is used for the dependency injections.\n     *\n     * @return {string} the required api version\n     */\n    public getRequiredApiVersion(): string {\n        return this.info.requiredApiVersion;\n    }\n\n    /**\n     * Gets the information regarding the author/maintainer of this App.\n     *\n     * @return author information\n     */\n    public getAuthorInfo(): IAppAuthorInfo {\n        return this.info.author;\n    }\n\n    /**\n     * Gets the entirity of the App's information.\n     *\n     * @return App information\n     */\n    public getInfo(): IAppInfo {\n        return this.info;\n    }\n\n    /**\n     * Gets the ILogger instance for this App.\n     *\n     * @return the logger instance\n     */\n    public getLogger(): ILogger {\n        return this.logger;\n    }\n\n    public getAccessors(): IAppAccessors {\n        return this.accessors;\n    }\n\n    /**\n     * Method which will be called when the App is initialized. This is the recommended place\n     * to add settings and slash commands. If an error is thrown, all commands will be unregistered.\n     */\n    public async initialize(configurationExtend: IConfigurationExtend, environmentRead: IEnvironmentRead): Promise<void> {\n        await this.extendConfiguration(configurationExtend, environmentRead);\n    }\n\n    /**\n     * Method which is called when this App is enabled and can be called several\n     * times during this instance's life time. Once after the `ititialize()` is called,\n     * pending it doesn't throw an error, and then anytime the App is enabled by the user.\n     * If this method, `onEnable()`, returns false, then this App will not\n     * actually be enabled (ex: a setting isn't configured).\n     *\n     * @return whether the App should be enabled or not\n     */\n    public async onEnable(environment: IEnvironmentRead, configurationModify: IConfigurationModify): Promise<boolean> {\n        return true;\n    }\n\n    /**\n     * Method which is called when this App is disabled and it can be called several times.\n     * If this App was enabled and then the user disabled it, this method will be called.\n     */\n    public async onDisable(configurationModify: IConfigurationModify): Promise<void> {\n        return;\n    }\n\n    /**\n     * Method which is called whenever a setting which belongs to this App has been updated\n     * by an external system and not this App itself. The setting passed is the newly updated one.\n     *\n     * @param setting the setting which was updated\n     * @param configurationModify the accessor to modifiy the system\n     * @param reader the reader accessor\n     * @param http an accessor to the outside world\n     */\n    public async onSettingUpdated(setting: ISetting, configurationModify: IConfigurationModify, read: IRead, http: IHttp): Promise<void> {\n        return;\n    }\n\n    /**\n     * Method will be called during initialization. It allows for adding custom configuration options and defaults\n     * @param configuration\n     */\n    protected async extendConfiguration(configuration: IConfigurationExtend, environmentRead: IEnvironmentRead): Promise<void> {\n        return;\n    }\n\n    /**\n     * Sets the status this App is now at, use only when 100% true (it's protected for a reason).\n     *\n     * @param status the new status of this App\n     */\n    protected async setStatus(status: AppStatus): Promise<void> {\n        this.logger.debug(`The status is now: ${ status }`);\n        this.status = status;\n    }\n}\n"]}