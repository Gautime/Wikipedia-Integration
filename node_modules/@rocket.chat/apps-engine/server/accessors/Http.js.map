{"version":3,"sources":["src/server/accessors/Http.ts"],"names":[],"mappings":"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","file":"Http.js","sourcesContent":["import {\n    IHttp,\n    IHttpExtend,\n    IHttpRequest,\n    IHttpResponse,\n    RequestMethod,\n} from '../../definition/accessors';\nimport { AppBridges } from '../bridges/AppBridges';\nimport { AppAccessorManager } from '../managers/AppAccessorManager';\n\nexport class Http implements IHttp {\n    constructor(private readonly accessManager: AppAccessorManager,\n                private readonly bridges: AppBridges,\n                private readonly httpExtender: IHttpExtend,\n                private readonly appId: string) { }\n\n    public get(url: string, options?: IHttpRequest): Promise<IHttpResponse> {\n        return this._processHandler(url, RequestMethod.GET, options);\n    }\n\n    public put(url: string, options?: IHttpRequest): Promise<IHttpResponse> {\n        return this._processHandler(url, RequestMethod.PUT, options);\n    }\n\n    public post(url: string, options?: IHttpRequest): Promise<IHttpResponse> {\n        return this._processHandler(url, RequestMethod.POST, options);\n    }\n\n    public del(url: string, options?: IHttpRequest): Promise<IHttpResponse> {\n        return this._processHandler(url, RequestMethod.DELETE, options);\n    }\n\n    private async _processHandler(url: string, method: RequestMethod, options?: IHttpRequest): Promise<IHttpResponse> {\n        let request = options || { };\n\n        if (typeof request.headers === 'undefined') {\n            request.headers = {};\n        }\n\n        this.httpExtender.getDefaultHeaders().forEach((value: string, key: string) => {\n            if (typeof request.headers[key] !== 'string') {\n                request.headers[key] = value;\n            }\n        });\n\n        if (typeof request.params === 'undefined') {\n            request.params = {};\n        }\n\n        this.httpExtender.getDefaultParams().forEach((value: string, key: string) => {\n            if (typeof request.params[key] !== 'string') {\n                request.params[key] = value;\n            }\n        });\n\n        const reader = this.accessManager.getReader(this.appId);\n        const persis = this.accessManager.getPersistence(this.appId);\n\n        for (const handler of this.httpExtender.getPreRequestHandlers()) {\n            request = await handler.executePreHttpRequest(url, request, reader, persis);\n        }\n\n        let response = await this.bridges.getHttpBridge().call({\n            appId: this.appId,\n            method,\n            url,\n            request,\n        });\n\n        for (const handler of this.httpExtender.getPreResponseHandlers()) {\n            response = await handler.executePreHttpResponse(response, reader, persis);\n        }\n\n        return response;\n    }\n}\n"]}