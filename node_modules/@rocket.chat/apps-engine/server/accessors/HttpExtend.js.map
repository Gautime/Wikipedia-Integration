{"version":3,"sources":["src/server/accessors/HttpExtend.ts"],"names":[],"mappings":";;AAMA;IAMI;QACI,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAAkB,CAAC;QACzC,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,EAAkB,CAAC;QACxC,IAAI,CAAC,QAAQ,GAAG,IAAI,KAAK,EAA0B,CAAC;QACpD,IAAI,CAAC,SAAS,GAAG,IAAI,KAAK,EAA2B,CAAC;IAC1D,CAAC;IAEM,oBAAoB,CAAC,GAAW,EAAE,KAAa;QAClD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACjC,CAAC;IAEM,qBAAqB,CAAC,OAAmC;QAC5D,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC/E,CAAC;IAEM,mBAAmB,CAAC,GAAW,EAAE,KAAa;QACjD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAChC,CAAC;IAEM,oBAAoB,CAAC,MAAkC;QAC1D,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC5E,CAAC;IAEM,wBAAwB,CAAC,OAA+B;QAC3D,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAChC,CAAC;IAEM,yBAAyB,CAAC,OAAgC;QAC7D,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC;IAEM,iBAAiB;QACpB,OAAO,IAAI,GAAG,CAAiB,IAAI,CAAC,OAAO,CAAC,CAAC;IACjD,CAAC;IAEM,gBAAgB;QACnB,OAAO,IAAI,GAAG,CAAiB,IAAI,CAAC,MAAM,CAAC,CAAC;IAChD,CAAC;IAEM,qBAAqB;QACxB,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAEM,sBAAsB;QACzB,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACtC,CAAC;CACJ;AApDD,gCAoDC","file":"HttpExtend.js","sourcesContent":["import {\n    IHttpExtend,\n    IHttpPreRequestHandler,\n    IHttpPreResponseHandler,\n} from '../../definition/accessors';\n\nexport class HttpExtend implements IHttpExtend {\n    private headers: Map<string, string>;\n    private params: Map<string, string>;\n    private requests: Array<IHttpPreRequestHandler>;\n    private responses: Array<IHttpPreResponseHandler>;\n\n    constructor() {\n        this.headers = new Map<string, string>();\n        this.params = new Map<string, string>();\n        this.requests = new Array<IHttpPreRequestHandler>();\n        this.responses = new Array<IHttpPreResponseHandler>();\n    }\n\n    public provideDefaultHeader(key: string, value: string): void {\n        this.headers.set(key, value);\n    }\n\n    public provideDefaultHeaders(headers: { [key: string]: string; }): void {\n        Object.keys(headers).forEach((key) => this.headers.set(key, headers[key]));\n    }\n\n    public provideDefaultParam(key: string, value: string): void {\n        this.params.set(key, value);\n    }\n\n    public provideDefaultParams(params: { [key: string]: string; }): void {\n        Object.keys(params).forEach((key) => this.params.set(key, params[key]));\n    }\n\n    public providePreRequestHandler(handler: IHttpPreRequestHandler): void {\n        this.requests.push(handler);\n    }\n\n    public providePreResponseHandler(handler: IHttpPreResponseHandler): void {\n        this.responses.push(handler);\n    }\n\n    public getDefaultHeaders(): Map<string, string> {\n        return new Map<string, string>(this.headers);\n    }\n\n    public getDefaultParams(): Map<string, string> {\n        return new Map<string, string>(this.params);\n    }\n\n    public getPreRequestHandlers(): Array<IHttpPreRequestHandler> {\n        return Array.from(this.requests);\n    }\n\n    public getPreResponseHandlers(): Array<IHttpPreResponseHandler> {\n        return Array.from(this.responses);\n    }\n}\n"]}