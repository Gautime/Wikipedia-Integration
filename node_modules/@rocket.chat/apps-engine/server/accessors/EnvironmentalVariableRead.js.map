{"version":3,"sources":["src/server/accessors/EnvironmentalVariableRead.ts"],"names":[],"mappings":";;AAIA;IACI,YAA6B,MAAoC,EAAmB,KAAa;QAApE,WAAM,GAAN,MAAM,CAA8B;QAAmB,UAAK,GAAL,KAAK,CAAQ;IAAG,CAAC;IAE9F,cAAc,CAAC,UAAkB;QACpC,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9D,CAAC;IAEM,UAAU,CAAC,UAAkB;QAChC,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1D,CAAC;IAEM,KAAK,CAAC,UAAkB;QAC3B,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACrD,CAAC;CACJ;AAdD,8DAcC","file":"EnvironmentalVariableRead.js","sourcesContent":["import { IEnvironmentalVariableBridge } from '../bridges';\n\nimport { IEnvironmentalVariableRead } from '../../definition/accessors';\n\nexport class EnvironmentalVariableRead implements IEnvironmentalVariableRead {\n    constructor(private readonly bridge: IEnvironmentalVariableBridge, private readonly appId: string) {}\n\n    public getValueByName(envVarName: string): Promise<string> {\n        return this.bridge.getValueByName(envVarName, this.appId);\n    }\n\n    public isReadable(envVarName: string): Promise<boolean> {\n        return this.bridge.isReadable(envVarName, this.appId);\n    }\n\n    public isSet(envVarName: string): Promise<boolean> {\n        return this.bridge.isSet(envVarName, this.appId);\n    }\n}\n"]}