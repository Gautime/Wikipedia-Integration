{"version":3,"sources":["src/server/accessors/PersistenceRead.ts"],"names":[],"mappings":";;AAIA;IACI,YAAoB,aAAiC,EAAU,KAAa;QAAxD,kBAAa,GAAb,aAAa,CAAoB;QAAU,UAAK,GAAL,KAAK,CAAQ;IAAI,CAAC;IAE1E,IAAI,CAAC,EAAU;QAClB,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACvD,CAAC;IAEM,iBAAiB,CAAC,WAAwC;QAC7D,OAAO,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,IAAI,KAAK,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACrF,CAAC;IAEM,kBAAkB,CAAC,YAAgD;QACtE,OAAO,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3E,CAAC;CACJ;AAdD,0CAcC","file":"PersistenceRead.js","sourcesContent":["import { IPersistenceRead } from '../../definition/accessors';\nimport { RocketChatAssociationRecord } from '../../definition/metadata';\nimport { IPersistenceBridge } from '../bridges';\n\nexport class PersistenceRead implements IPersistenceRead {\n    constructor(private persistBridge: IPersistenceBridge, private appId: string) { }\n\n    public read(id: string): Promise<object> {\n        return this.persistBridge.readById(id, this.appId);\n    }\n\n    public readByAssociation(association: RocketChatAssociationRecord): Promise<Array<object>> {\n        return this.persistBridge.readByAssociations(new Array(association), this.appId);\n    }\n\n    public readByAssociations(associations: Array<RocketChatAssociationRecord>): Promise<Array<object>> {\n        return this.persistBridge.readByAssociations(associations, this.appId);\n    }\n}\n"]}