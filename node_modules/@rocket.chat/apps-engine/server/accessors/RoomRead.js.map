{"version":3,"sources":["src/server/accessors/RoomRead.ts"],"names":[],"mappings":";;AAOA;IACI,YAAoB,UAAuB,EAAU,KAAa;QAA9C,eAAU,GAAV,UAAU,CAAa;QAAU,UAAK,GAAL,KAAK,CAAQ;IAAI,CAAC;IAEhE,OAAO,CAAC,EAAU;QACrB,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACnD,CAAC;IAEM,kBAAkB,CAAC,EAAU;QAChC,OAAO,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1D,CAAC;IAEM,SAAS,CAAC,IAAY;QACzB,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACvD,CAAC;IAEM,oBAAoB,CAAC,IAAY;QACpC,OAAO,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9D,CAAC;IAEM,WAAW,CAAC,MAAc;QAC7B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC/C,CAAC;IAEM,UAAU,CAAC,MAAc;QAC5B,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1D,CAAC;IAEM,oBAAoB,CAAC,SAAwB;QAChD,OAAO,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACvE,CAAC;CACJ;AA9BD,4BA8BC","file":"RoomRead.js","sourcesContent":["import { IRoomRead } from '../../definition/accessors';\nimport { IMessage } from '../../definition/messages';\nimport { IRoom } from '../../definition/rooms';\nimport { IUser } from '../../definition/users';\n\nimport { IRoomBridge } from '../bridges';\n\nexport class RoomRead implements IRoomRead {\n    constructor(private roomBridge: IRoomBridge, private appId: string) { }\n\n    public getById(id: string): Promise<IRoom> {\n        return this.roomBridge.getById(id, this.appId);\n    }\n\n    public getCreatorUserById(id: string): Promise<IUser> {\n        return this.roomBridge.getCreatorById(id, this.appId);\n    }\n\n    public getByName(name: string): Promise<IRoom> {\n        return this.roomBridge.getByName(name, this.appId);\n    }\n\n    public getCreatorUserByName(name: string): Promise<IUser> {\n        return this.roomBridge.getCreatorByName(name, this.appId);\n    }\n\n    public getMessages(roomId: string): Promise<IterableIterator<IMessage>> {\n        throw new Error('Method not implemented.');\n    }\n\n    public getMembers(roomId: string): Promise<Array<IUser>> {\n        return this.roomBridge.getMembers(roomId, this.appId);\n    }\n\n    public getDirectByUsernames(usernames: Array<string>): Promise<IRoom> {\n        return this.roomBridge.getDirectByUsernames(usernames, this.appId);\n    }\n}\n"]}