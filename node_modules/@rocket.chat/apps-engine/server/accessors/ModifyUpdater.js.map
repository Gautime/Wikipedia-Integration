{"version":3,"sources":["src/server/accessors/ModifyUpdater.ts"],"names":[],"mappings":";;;;;;;;;;AACA,wDAAuE;AAIvE,qDAAkD;AAClD,+CAA4C;AAE5C;IACI,YAA6B,OAAmB,EAAmB,KAAa;QAAnD,YAAO,GAAP,OAAO,CAAY;QAAmB,UAAK,GAAL,KAAK,CAAQ;IAAI,CAAC;IAExE,OAAO,CAAC,SAAiB,EAAE,OAAc;;YAClD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAEjF,OAAO,IAAI,+BAAc,CAAC,GAAG,CAAC,CAAC;QACnC,CAAC;KAAA;IAEY,IAAI,CAAC,MAAc,EAAE,OAAc;;YAC5C,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAE5E,OAAO,IAAI,yBAAW,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC;KAAA;IAEM,MAAM,CAAC,OAAuC;QACjD,QAAQ,OAAO,CAAC,IAAI,EAAE;YAClB,KAAK,qCAA0B,CAAC,OAAO;gBACnC,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YACxC,KAAK,qCAA0B,CAAC,IAAI;gBAChC,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YACrC;gBACI,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;SACvF;IACL,CAAC;IAEO,cAAc,CAAC,OAAwB;QAC3C,MAAM,MAAM,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;QAEpC,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;SAC/E;QAED,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE;YACrC,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;SAC9D;QAED,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACtE,CAAC;IAEO,WAAW,CAAC,OAAqB;QACrC,MAAM,MAAM,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;QAEjC,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;SACzE;QAED,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,EAAE;YACvC,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;SAC5D;QAED,IAAI,CAAC,MAAM,CAAC,aAAa,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,EAAE,EAAE;YACvD,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;SAClE;QAED,IAAI,CAAC,MAAM,CAAC,WAAW,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE;YACnD,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;SAChE;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;SACzD;QAED,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,4BAA4B,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3G,CAAC;CACJ;AAjED,sCAiEC","file":"ModifyUpdater.js","sourcesContent":["import { IMessageBuilder, IModifyUpdater, IRoomBuilder } from '../../definition/accessors';\nimport { RocketChatAssociationModel } from '../../definition/metadata';\nimport { IUser } from '../../definition/users';\n\nimport { AppBridges } from '../bridges';\nimport { MessageBuilder } from './MessageBuilder';\nimport { RoomBuilder } from './RoomBuilder';\n\nexport class ModifyUpdater implements IModifyUpdater {\n    constructor(private readonly bridges: AppBridges, private readonly appId: string) { }\n\n    public async message(messageId: string, updater: IUser): Promise<IMessageBuilder> {\n        const msg = await this.bridges.getMessageBridge().getById(messageId, this.appId);\n\n        return new MessageBuilder(msg);\n    }\n\n    public async room(roomId: string, updater: IUser): Promise<IRoomBuilder> {\n        const room = await this.bridges.getRoomBridge().getById(roomId, this.appId);\n\n        return new RoomBuilder(room);\n    }\n\n    public finish(builder: IMessageBuilder | IRoomBuilder): Promise<void> {\n        switch (builder.kind) {\n            case RocketChatAssociationModel.MESSAGE:\n                return this._finishMessage(builder);\n            case RocketChatAssociationModel.ROOM:\n                return this._finishRoom(builder);\n            default:\n                throw new Error('Invalid builder passed to the ModifyUpdater.finish function.');\n        }\n    }\n\n    private _finishMessage(builder: IMessageBuilder): Promise<void> {\n        const result = builder.getMessage();\n\n        if (!result.id) {\n            throw new Error('Invalid message, can not update a message without an id.');\n        }\n\n        if (!result.sender || !result.sender.id) {\n            throw new Error('Invalid sender assigned to the message.');\n        }\n\n        return this.bridges.getMessageBridge().update(result, this.appId);\n    }\n\n    private _finishRoom(builder: IRoomBuilder): Promise<void> {\n        const result = builder.getRoom();\n\n        if (!result.id) {\n            throw new Error('Invalid room, can not update a room without an id.');\n        }\n\n        if (!result.creator || !result.creator.id) {\n            throw new Error('Invalid creator assigned to the room.');\n        }\n\n        if (!result.slugifiedName || !result.slugifiedName.trim()) {\n            throw new Error('Invalid slugifiedName assigned to the room.');\n        }\n\n        if (!result.displayName || !result.displayName.trim()) {\n            throw new Error('Invalid displayName assigned to the room.');\n        }\n\n        if (!result.type) {\n            throw new Error('Invalid type assigned to the room.');\n        }\n\n        return this.bridges.getRoomBridge().update(result, builder.getMembersToBeAddedUsernames(), this.appId);\n    }\n}\n"]}