{"version":3,"sources":["src/server/AppManager.ts"],"names":[],"mappings":"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","file":"AppManager.js","sourcesContent":["import { AppBridges } from './bridges';\nimport { AppCompiler, AppFabricationFulfillment, AppPackageParser } from './compiler';\nimport { IGetAppsFilter } from './IGetAppsFilter';\nimport {\n    AppAccessorManager,\n    AppApiManager,\n    AppListenerManager,\n    AppSettingsManager,\n    AppSlashCommandManager,\n} from './managers';\nimport { DisabledApp } from './misc/DisabledApp';\nimport { ProxiedApp } from './ProxiedApp';\nimport { AppLogStorage, AppStorage, IAppStorageItem } from './storage';\n\nimport { AppStatus, AppStatusUtils } from '../definition/AppStatus';\nimport { AppMethod } from '../definition/metadata';\n\nexport class AppManager {\n    public static Instance: AppManager;\n\n    // apps contains all of the Apps\n    private readonly apps: Map<string, ProxiedApp>;\n    private readonly storage: AppStorage;\n    private readonly logStorage: AppLogStorage;\n    private readonly bridges: AppBridges;\n    private readonly parser: AppPackageParser;\n    private readonly compiler: AppCompiler;\n\n    private readonly accessorManager: AppAccessorManager;\n    private readonly listenerManager: AppListenerManager;\n    private readonly commandManager: AppSlashCommandManager;\n    private readonly apiManager: AppApiManager;\n    private readonly settingsManager: AppSettingsManager;\n\n    private isLoaded: boolean;\n\n    constructor(rlStorage: AppStorage, logStorage: AppLogStorage, rlBridges: AppBridges) {\n        // Singleton style. There can only ever be one AppManager instance\n        if (typeof AppManager.Instance !== 'undefined') {\n            throw new Error('There is already a valid AppManager instance.');\n        }\n\n        if (rlStorage instanceof AppStorage) {\n            this.storage = rlStorage;\n        } else {\n            throw new Error('Invalid instance of the AppStorage.');\n        }\n\n        if (logStorage instanceof AppLogStorage) {\n            this.logStorage = logStorage;\n        } else {\n            throw new Error('Invalid instance of the AppLogStorage.');\n        }\n\n        if (rlBridges instanceof AppBridges) {\n            this.bridges = rlBridges;\n        } else {\n            throw new Error('Invalid instance of the AppBridges');\n        }\n\n        this.apps = new Map<string, ProxiedApp>();\n\n        this.parser = new AppPackageParser();\n        this.compiler = new AppCompiler();\n        this.accessorManager = new AppAccessorManager(this);\n        this.listenerManager = new AppListenerManager(this);\n        this.commandManager = new AppSlashCommandManager(this);\n        this.apiManager = new AppApiManager(this);\n        this.settingsManager = new AppSettingsManager(this);\n\n        this.isLoaded = false;\n        AppManager.Instance = this;\n    }\n\n    /** Gets the instance of the storage connector. */\n    public getStorage(): AppStorage {\n        return this.storage;\n    }\n\n    /** Gets the instance of the log storage connector. */\n    public getLogStorage(): AppLogStorage {\n        return this.logStorage;\n    }\n\n    /** Gets the instance of the App package parser. */\n    public getParser(): AppPackageParser {\n        return this.parser;\n    }\n\n    /** Gets the compiler instance. */\n    public getCompiler(): AppCompiler {\n        return this.compiler;\n    }\n\n    /** Gets the accessor manager instance. */\n    public getAccessorManager(): AppAccessorManager {\n        return this.accessorManager;\n    }\n\n    /** Gets the instance of the Bridge manager. */\n    public getBridges(): AppBridges {\n        return this.bridges;\n    }\n\n    /** Gets the instance of the listener manager. */\n    public getListenerManager(): AppListenerManager {\n        return this.listenerManager;\n    }\n\n    /** Gets the command manager's instance. */\n    public getCommandManager(): AppSlashCommandManager {\n        return this.commandManager;\n    }\n\n    /** Gets the api manager's instance. */\n    public getApiManager(): AppApiManager {\n        return this.apiManager;\n    }\n\n    /** Gets the manager of the settings, updates and getting. */\n    public getSettingsManager(): AppSettingsManager {\n        return this.settingsManager;\n    }\n\n    /** Gets whether the Apps have been loaded or not. */\n    public areAppsLoaded(): boolean {\n        return this.isLoaded;\n    }\n\n    /**\n     * Goes through the entire loading up process.\n     * Expect this to take some time, as it goes through a very\n     * long process of loading all the Apps up.\n     */\n    public async load(): Promise<Array<AppFabricationFulfillment>> {\n        // You can not load the AppManager system again\n        // if it has already been loaded.\n        if (this.isLoaded) {\n            return;\n        }\n\n        const items: Map<string, IAppStorageItem> = await this.storage.retrieveAll();\n        const affs: Array<AppFabricationFulfillment> = new Array<AppFabricationFulfillment>();\n\n        for (const item of items.values()) {\n            const aff = new AppFabricationFulfillment();\n\n            try {\n                const result = await this.getParser().parseZip(this.getCompiler(), item.zip);\n\n                aff.setAppInfo(result.info);\n                aff.setImplementedInterfaces(result.implemented.getValues());\n                aff.setCompilerErrors(result.compilerErrors);\n\n                if (result.compilerErrors.length > 0) {\n                    throw new Error(`Failed to compile due to ${ result.compilerErrors.length } errors.`);\n                }\n\n                item.compiled = result.compiledFiles;\n\n                const app = this.getCompiler().toSandBox(this, item);\n                this.apps.set(item.id, app);\n                aff.setApp(app);\n            } catch (e) {\n                console.warn(`Error while compiling the App \"${ item.info.name } (${ item.id })\":`);\n                console.error(e);\n\n                const app = DisabledApp.createNew(item.info, AppStatus.COMPILER_ERROR_DISABLED);\n                app.getLogger().error(e);\n                this.logStorage.storeEntries(app.getID(), app.getLogger());\n\n                const prl = new ProxiedApp(this, item, app, () => '');\n                this.apps.set(item.id, prl);\n                aff.setApp(prl);\n            }\n\n            affs.push(aff);\n        }\n\n        // Let's initialize them\n        for (const rl of this.apps.values()) {\n            if (AppStatusUtils.isDisabled(rl.getStatus())) {\n                // Usually if an App is disabled before it's initialized,\n                // then something (such as an error) occured while\n                // it was compiled or something similar.\n                continue;\n            }\n\n            await this.initializeApp(items.get(rl.getID()), rl, true);\n        }\n\n        // Let's ensure the required settings are all set\n        for (const rl of this.apps.values()) {\n            if (AppStatusUtils.isDisabled(rl.getStatus())) {\n                continue;\n            }\n\n            if (!this.areRequiredSettingsSet(rl.getStorageItem())) {\n                await rl.setStatus(AppStatus.INVALID_SETTINGS_DISABLED);\n            }\n        }\n\n        // Now let's enable the apps which were once enabled\n        // but are not currently disabled.\n        for (const rl of this.apps.values()) {\n            if (!AppStatusUtils.isDisabled(rl.getStatus()) && AppStatusUtils.isEnabled(rl.getPreviousStatus())) {\n                await this.enableApp(items.get(rl.getID()), rl, true, rl.getPreviousStatus() === AppStatus.MANUALLY_ENABLED);\n            }\n        }\n\n        this.isLoaded = true;\n        return affs;\n    }\n\n    public async unload(isManual: boolean): Promise<void> {\n        // If the AppManager hasn't been loaded yet, then\n        // there is nothing to unload\n        if (!this.isLoaded) {\n            return;\n        }\n\n        for (const rl of this.apps.values()) {\n            if (AppStatusUtils.isDisabled(rl.getStatus())) {\n                continue;\n            } else if (rl.getStatus() === AppStatus.INITIALIZED) {\n                this.listenerManager.unregisterListeners(rl);\n                this.commandManager.unregisterCommands(rl.getID());\n                this.apiManager.unregisterApis(rl.getID());\n                this.accessorManager.purifyApp(rl.getID());\n                continue;\n            }\n\n            await this.disable(rl.getID(), isManual);\n        }\n\n        // Remove all the apps from the system now that we have unloaded everything\n        this.apps.clear();\n\n        this.isLoaded = false;\n    }\n\n    /** Gets the Apps which match the filter passed in. */\n    public get(filter?: IGetAppsFilter): Array<ProxiedApp> {\n        let rls = new Array<ProxiedApp>();\n\n        if (typeof filter === 'undefined') {\n            this.apps.forEach((rl) => rls.push(rl));\n\n            return rls;\n        }\n\n        let nothing = true;\n\n        if (typeof filter.enabled === 'boolean' && filter.enabled) {\n            this.apps.forEach((rl) => {\n                if (AppStatusUtils.isEnabled(rl.getStatus())) {\n                    rls.push(rl);\n                }\n            });\n            nothing = false;\n        }\n\n        if (typeof filter.disabled === 'boolean' && filter.disabled) {\n            this.apps.forEach((rl) => {\n                if (AppStatusUtils.isDisabled(rl.getStatus())) {\n                    rls.push(rl);\n                }\n            });\n            nothing = false;\n        }\n\n        if (nothing) {\n            this.apps.forEach((rl) => rls.push(rl));\n        }\n\n        if (typeof filter.ids !== 'undefined') {\n            rls = rls.filter((rl) => filter.ids.includes(rl.getID()));\n        }\n\n        if (typeof filter.name === 'string') {\n            rls = rls.filter((rl) => rl.getName() === filter.name);\n        } else if (filter.name instanceof RegExp) {\n            rls = rls.filter((rl) => (filter.name as RegExp).test(rl.getName()));\n        }\n\n        return rls;\n    }\n\n    /** Gets a single App by the id passed in. */\n    public getOneById(appId: string): ProxiedApp {\n        return this.apps.get(appId);\n    }\n\n    public async enable(id: string): Promise<boolean> {\n        const rl = this.apps.get(id);\n\n        if (!rl) {\n            throw new Error(`No App by the id \"${id}\" exists.`);\n        }\n\n        if (AppStatusUtils.isEnabled(rl.getStatus())) {\n            throw new Error('The App is already enabled.');\n        }\n\n        if (rl.getStatus() === AppStatus.COMPILER_ERROR_DISABLED) {\n            throw new Error('The App had compiler errors, can not enable it.');\n        }\n\n        const storageItem = await this.storage.retrieveOne(id);\n        if (!storageItem) {\n            throw new Error(`Could not enable an App with the id of \"${id}\" as it doesn't exist.`);\n        }\n\n        const isSetup = await this.runStartUpProcess(storageItem, rl, true, false);\n        if (isSetup) {\n            storageItem.status = rl.getStatus();\n            // This is async, but we don't care since it only updates in the database\n            // and it should not mutate any properties we care about\n            this.storage.update(storageItem);\n        }\n\n        return isSetup;\n    }\n\n    public async disable(id: string, isManual = false): Promise<boolean> {\n        const rl = this.apps.get(id);\n\n        if (!rl) {\n            throw new Error(`No App by the id \"${id}\" exists.`);\n        }\n\n        if (!AppStatusUtils.isEnabled(rl.getStatus())) {\n            throw new Error(`No App by the id of \"${id}\" is enabled.\"`);\n        }\n\n        const storageItem = await this.storage.retrieveOne(id);\n        if (!storageItem) {\n            throw new Error(`Could not disable an App with the id of \"${id}\" as it doesn't exist.`);\n        }\n\n        try {\n            await rl.call(AppMethod.ONDISABLE, this.accessorManager.getConfigurationModify(storageItem.id));\n        } catch (e) {\n            console.warn('Error while disabling:', e);\n        }\n\n        this.listenerManager.unregisterListeners(rl);\n        this.commandManager.unregisterCommands(storageItem.id);\n        this.apiManager.unregisterApis(storageItem.id);\n        this.accessorManager.purifyApp(storageItem.id);\n\n        if (isManual) {\n            await rl.setStatus(AppStatus.MANUALLY_DISABLED);\n        }\n\n        // This is async, but we don't care since it only updates in the database\n        // and it should not mutate any properties we care about\n        storageItem.status = rl.getStatus();\n        this.storage.update(storageItem);\n\n        return true;\n    }\n\n    public async add(zipContentsBase64d: string, enable = true): Promise<AppFabricationFulfillment> {\n        const aff = new AppFabricationFulfillment();\n        const result = await this.getParser().parseZip(this.getCompiler(), zipContentsBase64d);\n\n        aff.setAppInfo(result.info);\n        aff.setImplementedInterfaces(result.implemented.getValues());\n        aff.setCompilerErrors(result.compilerErrors);\n\n        if (result.compilerErrors.length > 0) {\n            return aff;\n        }\n\n        const created = await this.storage.create({\n            id: result.info.id,\n            info: result.info,\n            status: AppStatus.UNKNOWN,\n            zip: zipContentsBase64d,\n            compiled: result.compiledFiles,\n            languageContent: result.languageContent,\n            settings: {},\n            implemented: result.implemented.getValues(),\n        });\n\n        if (!created) {\n            throw new Error('Failed to create the App, the storage did not return it.');\n        }\n\n        // Now that is has all been compiled, let's get the\n        // the App instance from the source.\n        const app = this.getCompiler().toSandBox(this, created);\n\n        this.apps.set(app.getID(), app);\n        aff.setApp(app);\n\n        // Let everyone know that the App has been added\n        try {\n            await this.bridges.getAppActivationBridge().appAdded(app);\n        } catch (e) {\n            // If an error occurs during this, oh well.\n        }\n\n        // Should enable === true, then we go through the entire start up process\n        // Otherwise, we only initialize it.\n        if (enable) {\n            // Start up the app\n            await this.runStartUpProcess(created, app, false, false);\n        } else {\n            await this.initializeApp(created, app, true);\n        }\n\n        return aff;\n    }\n\n    public async remove(id: string): Promise<ProxiedApp> {\n        const app = this.apps.get(id);\n\n        if (AppStatusUtils.isEnabled(app.getStatus())) {\n            await this.disable(id);\n        }\n\n        this.listenerManager.unregisterListeners(app);\n        this.commandManager.unregisterCommands(app.getID());\n        this.apiManager.unregisterApis(app.getID());\n        this.accessorManager.purifyApp(app.getID());\n        await this.bridges.getPersistenceBridge().purge(app.getID());\n        await this.logStorage.removeEntriesFor(app.getID());\n        await this.storage.remove(app.getID());\n\n        // Let everyone know that the App has been removed\n        try {\n            await this.bridges.getAppActivationBridge().appRemoved(app);\n        } catch (e) {\n            // If an error occurs during this, oh well.\n        }\n\n        this.apps.delete(app.getID());\n\n        return app;\n    }\n\n    public async update(zipContentsBase64d: string): Promise<AppFabricationFulfillment> {\n        const aff = new AppFabricationFulfillment();\n        const result = await this.getParser().parseZip(this.getCompiler(), zipContentsBase64d);\n\n        aff.setAppInfo(result.info);\n        aff.setImplementedInterfaces(result.implemented.getValues());\n        aff.setCompilerErrors(result.compilerErrors);\n\n        if (result.compilerErrors.length > 0) {\n            return aff;\n        }\n\n        const old = await this.storage.retrieveOne(result.info.id);\n\n        if (!old) {\n            throw new Error('Can not update an App that does not currently exist.');\n        }\n\n        // Attempt to disable it, if it wasn't enabled then it will error and we don't care\n        try {\n            await this.disable(old.id);\n        } catch (e) {\n            // We don't care\n        }\n\n        // TODO: We could show what new interfaces have been added\n\n        const stored = await this.storage.update({\n            createdAt: old.createdAt,\n            id: result.info.id,\n            info: result.info,\n            status: this.apps.get(old.id).getStatus(),\n            zip: zipContentsBase64d,\n            compiled: result.compiledFiles,\n            languageContent: result.languageContent,\n            settings: old.settings,\n            implemented: result.implemented.getValues(),\n        });\n\n        // Now that is has all been compiled, let's get the\n        // the App instance from the source.\n        const app = this.getCompiler().toSandBox(this, stored);\n\n        // Store it temporarily so we can access it else where\n        this.apps.set(app.getID(), app);\n        aff.setApp(app);\n\n        // Start up the app\n        await this.runStartUpProcess(stored, app, false, true);\n\n        // Let everyone know that the App has been updated\n        try {\n            await this.bridges.getAppActivationBridge().appUpdated(app);\n        } catch (e) {\n            // If an error occurs during this, oh well.\n        }\n\n        return aff;\n    }\n\n    public getLanguageContent(): { [key: string]: object } {\n        const langs: { [key: string]: object } = { };\n\n        this.apps.forEach((rl) => {\n            const content = rl.getStorageItem().languageContent;\n\n            Object.keys(content).forEach((key) => {\n                langs[key] = Object.assign(langs[key] || {}, content[key]);\n            });\n        });\n\n        return langs;\n    }\n\n    public async changeStatus(appId: string, status: AppStatus): Promise<ProxiedApp> {\n        switch (status) {\n            case AppStatus.MANUALLY_DISABLED:\n            case AppStatus.MANUALLY_ENABLED:\n                break;\n            default:\n                throw new Error('Invalid status to change an App to, must be manually disabled or enabled.');\n        }\n\n        const rl = this.apps.get(appId);\n\n        if (!rl) {\n            throw new Error('Can not change the status of an App which does not currently exist.');\n        }\n\n        if (AppStatusUtils.isEnabled(status)) {\n            // Then enable it\n            if (AppStatusUtils.isEnabled(rl.getStatus())) {\n                throw new Error('Can not enable an App which is already enabled.');\n            }\n\n            await this.enable(rl.getID());\n        } else {\n            if (!AppStatusUtils.isEnabled(rl.getStatus())) {\n                throw new Error('Can not disable an App which is not enabled.');\n            }\n\n            await this.disable(rl.getID(), true);\n        }\n\n        return rl;\n    }\n\n    /**\n     * Goes through the entire loading up process. WARNING: Do not use. ;)\n     *\n     * @param appId the id of the application to load\n     */\n    protected async loadOne(appId: string): Promise<ProxiedApp> {\n        const item: IAppStorageItem = await this.storage.retrieveOne(appId);\n\n        if (!item) {\n            throw new Error(`No App found by the id of: \"${ appId }\"`);\n        }\n\n        this.apps.set(item.id, this.getCompiler().toSandBox(this, item));\n\n        const rl = this.apps.get(item.id);\n        await this.initializeApp(item, rl, false);\n\n        if (!this.areRequiredSettingsSet(item)) {\n            await rl.setStatus(AppStatus.INVALID_SETTINGS_DISABLED);\n        }\n\n        if (!AppStatusUtils.isDisabled(rl.getStatus()) && AppStatusUtils.isEnabled(rl.getPreviousStatus())) {\n            await this.enableApp(item, rl, false, rl.getPreviousStatus() === AppStatus.MANUALLY_ENABLED);\n        }\n\n        return this.apps.get(item.id);\n    }\n\n    private async runStartUpProcess(storageItem: IAppStorageItem, app: ProxiedApp, isManual: boolean, silenceStatus: boolean): Promise<boolean> {\n        if (app.getStatus() !== AppStatus.INITIALIZED) {\n            const isInitialized = await this.initializeApp(storageItem, app, true, silenceStatus);\n            if (!isInitialized) {\n                return false;\n            }\n        }\n\n        if (!this.areRequiredSettingsSet(storageItem)) {\n            await app.setStatus(AppStatus.INVALID_SETTINGS_DISABLED, silenceStatus);\n            return false;\n        }\n\n        const isEnabled = await this.enableApp(storageItem, app, true, isManual, silenceStatus);\n        if (!isEnabled) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private async initializeApp(storageItem: IAppStorageItem, app: ProxiedApp, saveToDb = true, silenceStatus = false): Promise<boolean> {\n        let result: boolean;\n        const configExtend = this.getAccessorManager().getConfigurationExtend(storageItem.id);\n        const envRead = this.getAccessorManager().getEnvironmentRead(storageItem.id);\n\n        try {\n            await app.call(AppMethod.INITIALIZE, configExtend, envRead);\n            result = true;\n            await app.setStatus(AppStatus.INITIALIZED, silenceStatus);\n        } catch (e) {\n            if (e.name === 'NotEnoughMethodArgumentsError') {\n                console.warn('Please report the following error:');\n            }\n\n            console.error(e);\n            this.commandManager.unregisterCommands(storageItem.id);\n            this.apiManager.unregisterApis(storageItem.id);\n            result = false;\n\n            await app.setStatus(AppStatus.ERROR_DISABLED, silenceStatus);\n        }\n\n        if (saveToDb) {\n            // This is async, but we don't care since it only updates in the database\n            // and it should not mutate any properties we care about\n            storageItem.status = app.getStatus();\n            this.storage.update(storageItem);\n        }\n\n        return result;\n    }\n\n    /**\n     * Determines if the App's required settings are set or not.\n     * Should a packageValue be provided and not empty, then it's considered set.\n     */\n    private areRequiredSettingsSet(storageItem: IAppStorageItem): boolean {\n        let result = true;\n\n        for (const setk of Object.keys(storageItem.settings)) {\n            const sett = storageItem.settings[setk];\n            // If it's not required, ignore\n            if (!sett.required) {\n                continue;\n            }\n\n            if (sett.value !== 'undefined' || sett.packageValue !== 'undefined') {\n                continue;\n            }\n\n            result = false;\n        }\n\n        return result;\n    }\n\n    private async enableApp(storageItem: IAppStorageItem, app: ProxiedApp, saveToDb = true, isManual: boolean, silenceStatus = false): Promise<boolean> {\n        let enable: boolean;\n\n        try {\n            enable = await app.call(AppMethod.ONENABLE,\n                this.getAccessorManager().getEnvironmentRead(storageItem.id),\n                this.getAccessorManager().getConfigurationModify(storageItem.id)) as boolean;\n            await app.setStatus(isManual ? AppStatus.MANUALLY_ENABLED : AppStatus.AUTO_ENABLED, silenceStatus);\n        } catch (e) {\n            enable = false;\n\n            if (e.name === 'NotEnoughMethodArgumentsError') {\n                console.warn('Please report the following error:');\n            }\n\n            console.error(e);\n            await app.setStatus(AppStatus.ERROR_DISABLED, silenceStatus);\n        }\n\n        if (enable) {\n            this.commandManager.registerCommands(app.getID());\n            this.apiManager.registerApis(app.getID());\n            this.listenerManager.registerListeners(app);\n        } else {\n            this.commandManager.unregisterCommands(app.getID());\n            this.apiManager.unregisterApis(app.getID());\n        }\n\n        if (saveToDb) {\n            storageItem.status = app.getStatus();\n            // This is async, but we don't care since it only updates in the database\n            // and it should not mutate any properties we care about\n            this.storage.update(storageItem);\n        }\n\n        return enable;\n    }\n}\n"]}