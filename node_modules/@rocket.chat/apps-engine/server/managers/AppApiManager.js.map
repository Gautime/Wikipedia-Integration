{"version":3,"sources":["src/server/managers/AppApiManager.ts"],"names":[],"mappings":"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","file":"AppApiManager.js","sourcesContent":["import { HttpStatusCode } from '../../definition/accessors';\nimport { IApi, IApiEndpointMetadata, IApiRequest, IApiResponse } from '../../definition/api';\nimport { AppStatusUtils } from '../../definition/AppStatus';\nimport { AppManager } from '../AppManager';\nimport { IAppApiBridge } from '../bridges';\nimport { PathAlreadyExistsError } from '../errors';\nimport { AppAccessorManager } from './AppAccessorManager';\nimport { AppApi } from './AppApi';\n\n/**\n * The api manager for the Apps.\n *\n * An App will add api's during their `initialize` method.\n * Then once an App's `onEnable` is called and it returns true,\n * only then will that App's api's be enabled.\n */\nexport class AppApiManager {\n    private readonly bridge: IAppApiBridge;\n    private readonly accessors: AppAccessorManager;\n    // Variable that contains the api's which have been provided by apps.\n    // The key of the top map is app id and the key of the inner map is the path\n    private providedApis: Map<string, Map<string, AppApi>>;\n\n    constructor(private readonly manager: AppManager) {\n        this.bridge = this.manager.getBridges().getApiBridge();\n        this.accessors = this.manager.getAccessorManager();\n        this.providedApis = new Map<string, Map<string, AppApi>>();\n    }\n\n    /**\n     * Adds an to *be* registered. This will *not register* it with the\n     * bridged system yet as this is only called on an App's\n     * `initialize` method and an App might not get enabled.\n     * When adding an api, it can *not* already exist in the system.\n     *\n     * @param appId the app's id which the api belongs to\n     * @param api the api to add to the system\n     */\n    public addApi(appId: string, api: IApi): void {\n        if (api.endpoints.length === 0) {\n            throw new Error('Invalid Api parameter provided, endpoints must contain, at least, one IApiEndpoint.');\n        }\n\n        const app = this.manager.getOneById(appId);\n        if (!app) {\n            throw new Error('App must exist in order for an api to be added.');\n        }\n\n        // Verify the api's path doesn't exist already\n        if (this.providedApis.get(appId)) {\n            api.endpoints.forEach((endpoint) => {\n                if (this.providedApis.get(appId).has(endpoint.path)) {\n                    throw new PathAlreadyExistsError(endpoint.path);\n                }\n            });\n        }\n\n        if (!this.providedApis.has(appId)) {\n            this.providedApis.set(appId, new Map<string, AppApi>());\n        }\n\n        api.endpoints.forEach((endpoint) => {\n            this.providedApis.get(appId).set(endpoint.path, new AppApi(app, api, endpoint));\n        });\n    }\n\n    /**\n     * Registers all of the api's for the provided app inside\n     * of the bridged system which then enables them.\n     *\n     * @param appId The app's id of which to register it's api's with the bridged system\n     */\n    public registerApis(appId: string): void {\n        if (!this.providedApis.has(appId)) {\n            return;\n        }\n\n        for (const [, apiapp] of this.providedApis.get(appId).entries()) {\n            this.registerApi(appId, apiapp);\n        }\n    }\n\n    /**\n     * Unregisters the api's from the system.\n     *\n     * @param appId the appId for the api's to purge\n     */\n    public unregisterApis(appId: string): void {\n        if (this.providedApis.has(appId)) {\n            this.bridge.unregisterApis(appId);\n\n            this.providedApis.delete(appId);\n        }\n    }\n\n    /**\n     * Executes an App's api.\n     *\n     * @param appId the app which is providing the api\n     * @param path the path to be executed in app's api's\n     * @param request the request data to be evaluated byt the app\n     */\n    public async executeApi(appId: string, path: string, request: IApiRequest): Promise<IApiResponse> {\n        const api = this.providedApis.get(appId).get(path);\n\n        if (!api) {\n            return {\n                status: HttpStatusCode.NOT_FOUND,\n            };\n        }\n\n        const app = this.manager.getOneById(appId);\n\n        if (!app || AppStatusUtils.isDisabled(app.getStatus())) {\n            // Just in case someone decides to do something they shouldn't\n            // let's ensure the app actually exists\n            return {\n                status: HttpStatusCode.NOT_FOUND,\n            };\n        }\n\n        return api.runExecutor(request, this.manager.getLogStorage(), this.accessors);\n    }\n\n    /**\n     * Return a list of api's for a certain app\n     *\n     * @param appId the app which is providing the api\n     */\n    public listApis(appId: string): Array<IApiEndpointMetadata> {\n        const apis = this.providedApis.get(appId);\n\n        if (!apis) {\n            return [];\n        }\n\n        const result = [];\n\n        for (const api of apis.values()) {\n            const metadata: IApiEndpointMetadata = {\n                path: api.endpoint.path,\n                computedPath: api.computedPath,\n                methods: api.implementedMethods,\n                examples: api.endpoint.examples || {},\n            };\n\n            result.push(metadata);\n        }\n\n        return result;\n    }\n\n    /**\n     * Actually goes and provide's the bridged system with the api information.\n     *\n     * @param appId the app which is providing the api\n     * @param info the api's registration information\n     */\n    private registerApi(appId: string, api: AppApi): void {\n        this.bridge.registerApi(api, appId);\n    }\n}\n"]}