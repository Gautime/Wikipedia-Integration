{"version":3,"sources":["src/server/managers/AppSlashCommand.ts"],"names":[],"mappings":"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","file":"AppSlashCommand.js","sourcesContent":["import { AppMethod } from '../../definition/metadata';\nimport { ISlashCommand, ISlashCommandPreview, ISlashCommandPreviewItem, SlashCommandContext } from '../../definition/slashcommands';\n\nimport { ProxiedApp } from '../ProxiedApp';\nimport { AppLogStorage } from '../storage';\nimport { AppAccessorManager } from './AppAccessorManager';\n\nexport class AppSlashCommand {\n    /**\n     * States whether this command has been registered into the Rocket.Chat system or not.\n     */\n    public isRegistered: boolean;\n\n    /**\n     * Declares whether this command has been enabled or not,\n     * does not have to be inside of the Rocket.Chat system if `isRegistered` is false.\n     */\n    public isEnabled: boolean;\n\n    /**\n     * Proclaims whether this command has been disabled or not,\n     * does not have to be inside the Rocket.Chat system if `isRegistered` is false.\n     */\n    public isDisabled: boolean;\n\n    constructor(public app: ProxiedApp, public slashCommand: ISlashCommand) {\n        this.isRegistered = false;\n        this.isEnabled = false;\n        this.isDisabled = false;\n    }\n\n    public hasBeenRegistered(): void {\n        this.isDisabled = false;\n        this.isEnabled = true;\n        this.isRegistered = true;\n    }\n\n    public canBeRan(method: AppMethod): boolean {\n        return this.app.hasMethod(method);\n    }\n\n    public async runExecutorOrPreviewer(method: AppMethod._COMMAND_EXECUTOR | AppMethod._COMMAND_PREVIEWER,\n                                        context: SlashCommandContext, logStorage: AppLogStorage,\n                                        accessors: AppAccessorManager): Promise<void | ISlashCommandPreview> {\n\n        return await this.runTheCode(method, logStorage, accessors, context, new Array());\n    }\n\n    public async runPreviewExecutor(previewItem: ISlashCommandPreviewItem, context: SlashCommandContext,\n                                    logStorage: AppLogStorage, accessors: AppAccessorManager): Promise<void> {\n\n        await this.runTheCode(AppMethod._COMMAND_PREVIEW_EXECUTOR, logStorage, accessors, context, [previewItem]);\n        return;\n    }\n\n    private async runTheCode(method: AppMethod._COMMAND_EXECUTOR | AppMethod._COMMAND_PREVIEWER | AppMethod._COMMAND_PREVIEW_EXECUTOR,\n                             logStorage: AppLogStorage, accessors: AppAccessorManager,\n                             context: SlashCommandContext, runContextArgs: Array<any>): Promise<void | ISlashCommandPreview> {\n        const command = this.slashCommand.command;\n\n        // Ensure the slash command has the property before going on\n        if (typeof this.slashCommand[method] !== 'function') {\n            return;\n        }\n\n        const runContext = this.app.makeContext({\n            slashCommand: this.slashCommand,\n            args: [\n                ...runContextArgs,\n                context,\n                accessors.getReader(this.app.getID()),\n                accessors.getModifier(this.app.getID()),\n                accessors.getHttp(this.app.getID()),\n                accessors.getPersistence(this.app.getID()),\n            ],\n        });\n\n        const logger = this.app.setupLogger(method);\n        logger.debug(`${ command }'s ${ method } is being executed...`, context);\n\n        let result: void | ISlashCommandPreview;\n        try {\n            const runCode = `slashCommand.${ method }.apply(slashCommand, args)`;\n            result = await this.app.runInContext(runCode, runContext);\n            logger.debug(`${ command }'s ${ method } was successfully executed.`);\n        } catch (e) {\n            logger.error(e);\n            logger.debug(`${ command }'s ${ method } was unsuccessful.`);\n        }\n\n        try {\n            await logStorage.storeEntries(this.app.getID(), logger);\n        } catch (e) {\n            // Don't care, at the moment.\n            // TODO: Evaluate to determine if we do care\n        }\n\n        return result;\n    }\n}\n"]}