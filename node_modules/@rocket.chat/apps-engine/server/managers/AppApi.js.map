{"version":3,"sources":["src/server/managers/AppApi.ts"],"names":[],"mappings":"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","file":"AppApi.js","sourcesContent":["import { AppMethod } from '../../definition/metadata';\n\nimport { ApiSecurity, ApiVisibility, IApi, IApiRequest, IApiResponse } from '../../definition/api';\nimport { IApiEndpoint } from '../../definition/api/IApiEndpoint';\nimport { IApiEndpointInfo } from '../../definition/api/IApiEndpointInfo';\nimport { ProxiedApp } from '../ProxiedApp';\nimport { AppLogStorage } from '../storage';\nimport { AppAccessorManager } from './AppAccessorManager';\n\nconst methods: Array<string> = [\n    'get',\n    'post',\n    'put',\n    'delete',\n    'head',\n    'options',\n    'patch',\n];\n\nexport class AppApi {\n    public readonly computedPath: string;\n    public readonly basePath: string;\n    public readonly appId: string;\n    public readonly hash?: string;\n    public readonly implementedMethods: Array<string>;\n\n    constructor(public app: ProxiedApp, public api: IApi, public endpoint: IApiEndpoint) {\n        this.appId = app.getID();\n\n        switch (this.api.visibility) {\n            case ApiVisibility.PUBLIC:\n                this.basePath = `/api/apps/public/${app.getID()}`;\n                break;\n\n            case ApiVisibility.PRIVATE:\n                this.basePath = `/api/apps/private/${app.getID()}/${app.getStorageItem()._id}`;\n                this.hash = app.getStorageItem()._id;\n                break;\n        }\n\n        this.computedPath = `${this.basePath}/${endpoint.path}`;\n\n        this.implementedMethods = methods.filter((m) => typeof (endpoint as any)[m] === 'function');\n    }\n\n    public async runExecutor(request: IApiRequest,\n                             logStorage: AppLogStorage,\n                             accessors: AppAccessorManager): Promise<IApiResponse> {\n\n        const { path } = this.endpoint;\n\n        const method = request.method;\n\n        // Ensure the api has the property before going on\n        if (typeof this.endpoint[method] !== 'function') {\n            return;\n        }\n\n        if (!this.validateVisibility(request)) {\n            return {\n                status: 404,\n            };\n        }\n\n        if (!this.validateSecurity(request)) {\n            return {\n                status: 401,\n            };\n        }\n\n        const endpoint: IApiEndpointInfo = {\n            basePath: this.basePath,\n            fullPath: this.computedPath,\n            appId: this.appId,\n            hash: this.hash,\n        };\n\n        const runContext = this.app.makeContext({\n            endpoint: this.endpoint,\n            args: [\n                request,\n                endpoint,\n                accessors.getReader(this.app.getID()),\n                accessors.getModifier(this.app.getID()),\n                accessors.getHttp(this.app.getID()),\n                accessors.getPersistence(this.app.getID()),\n            ],\n        });\n\n        const logger = this.app.setupLogger(AppMethod._API_EXECUTOR);\n        logger.debug(`${ path }'s ${ method } is being executed...`, request);\n\n        const runCode = `endpoint.${ method }.apply(endpoint, args)`;\n        try {\n            const result: IApiResponse = await this.app.runInContext(runCode, runContext);\n            logger.debug(`${ path }'s ${ method } was successfully executed.`);\n            logStorage.storeEntries(this.app.getID(), logger);\n            return result;\n        } catch (e) {\n            logger.error(e);\n            logger.debug(`${ path }'s ${ method } was unsuccessful.`);\n            logStorage.storeEntries(this.app.getID(), logger);\n            throw e;\n        }\n    }\n\n    private validateVisibility(request: IApiRequest): boolean {\n        if (this.api.visibility === ApiVisibility.PUBLIC) {\n            return true;\n        }\n\n        if (this.api.visibility === ApiVisibility.PRIVATE) {\n            return this.app.getStorageItem()._id === request.privateHash;\n        }\n\n        return false;\n    }\n\n    private validateSecurity(request: IApiRequest): boolean {\n        if (this.api.security === ApiSecurity.UNSECURE) {\n            return true;\n        }\n\n        return false;\n    }\n}\n"]}