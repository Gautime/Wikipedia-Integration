{"version":3,"sources":["src/server/compiler/AppPackageParser.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,sCAAoD;AAKpD,kCAAkC;AAClC,yBAAyB;AACzB,6BAA6B;AAC7B,iCAAiC;AACjC,kCAAkC;AAGlC;IAMI;QAHQ,oBAAe,GAAkB,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;QAIvE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;IAC/C,CAAC;IAEY,QAAQ,CAAC,QAAqB,EAAE,SAAiB;;YAC1D,MAAM,GAAG,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC;YACzD,MAAM,OAAO,GAAG,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YACzC,IAAI,IAAc,CAAC;YAEnB,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;gBACjC,IAAI;oBACA,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAa,CAAC;oBAE5D,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;wBAC5C,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE,CAAC;wBACnB,OAAO,CAAC,IAAI,CAAC,sDAAsD,EAC/D,IAAI,CAAC,IAAI,EAAE,gDAAgD,EAC3D,6DAA6D,CAAC,CAAC;qBACtE;iBACJ;gBAAC,OAAO,CAAC,EAAE;oBACR,MAAM,IAAI,KAAK,CAAC,6DAA6D,CAAC,CAAC;iBAClF;aACJ;iBAAM;gBACH,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;aAC/D;YAED,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,kBAAkB,CAAC,EAAE;gBAC/D,MAAM,IAAI,gCAAuB,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;aAC9D;YAED,wCAAwC;YACxC,IAAI,OAAO,GAAmC,EAAE,CAAC;YAEjD,GAAG,CAAC,UAAU,EAAE,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBACxG,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;gBAE7C,uDAAuD;gBACvD,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;oBACtB,OAAO;iBACV;gBAED,OAAO,CAAC,IAAI,CAAC,GAAG;oBACZ,IAAI,EAAE,IAAI;oBACV,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE;oBACnC,OAAO,EAAE,CAAC;iBACb,CAAC;YACN,CAAC,CAAC,CAAC;YAEH,yCAAyC;YACzC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE;gBAC1C,MAAM,IAAI,KAAK,CAAC,sDAAsD,IAAI,CAAC,SAAS,SAAS,CAAC,CAAC;aAClG;YAED,MAAM,eAAe,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;YAErD,iDAAiD;YACjD,MAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAC5C,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC;YAEvB,MAAM,aAAa,GAA4B,EAAE,CAAC;YAClD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;gBAClC,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;gBAClC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC;YACrE,CAAC,CAAC,CAAC;YAEH,yBAAyB;YACzB,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,IAAI,QAAQ,EAAE;gBACV,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;aACnC;YAED,OAAO;gBACH,IAAI;gBACJ,aAAa;gBACb,eAAe;gBACf,WAAW,EAAE,MAAM,CAAC,WAAW;gBAC/B,cAAc,EAAE,MAAM,CAAC,cAAc;aACxC,CAAC;QACN,CAAC;KAAA;IAEO,kBAAkB,CAAC,GAAW;QAClC,MAAM,eAAe,GAA8B,EAAE,CAAC;QAEtD,GAAG,CAAC,UAAU,EAAE,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAC9B,CAAC,KAAK,CAAC,WAAW;YAClB,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC;YACnC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;aACrC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YACf,MAAM,UAAU,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC9C,MAAM,IAAI,GAAG,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;YAE3E,IAAI,OAAO,CAAC;YACZ,IAAI;gBACA,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;aACpD;YAAC,OAAO,CAAC,EAAE;gBACR,+CAA+C;aAClD;YAED,eAAe,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;QAChF,CAAC,CAAC,CAAC;QAEH,OAAO,eAAe,CAAC;IAC3B,CAAC;IAEO,WAAW,CAAC,GAAW,EAAE,QAAgB;QAC7C,IAAI,CAAC,QAAQ,EAAE;YACX,OAAO,SAAS,CAAC;SACpB;QAED,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACnC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YACrC,OAAO,SAAS,CAAC;SACpB;QAED,MAAM,KAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAErC,IAAI,CAAC,KAAK,EAAE;YACR,OAAO,SAAS,CAAC;SACpB;QAED,IAAI,KAAK,CAAC,WAAW,EAAE;YACnB,OAAO,SAAS,CAAC;SACpB;QAED,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAElD,OAAO,cAAe,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAE,WAAY,MAAO,EAAE,CAAC;IACrE,CAAC;IAEO,eAAe;QACnB,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,uBAAuB,CAAC,CAAC;QAClE,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,oBAAoB,CAAC,CAAC;QAEhE,IAAI,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE;YAC5B,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,CAAC;YAC9D,OAAO,IAAI,CAAC,OAAiB,CAAC;SACjC;aAAM,IAAI,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE;YACpC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC,CAAC;YAC/D,OAAO,IAAI,CAAC,OAAiB,CAAC;SACjC;aAAM;YACH,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;SACrF;IACL,CAAC;;AAnJD,2CAA2C;AAC7B,2BAAU,GAAW,wFAAwF,CAAC;AAFhI,4CAqJC","file":"AppPackageParser.js","sourcesContent":["import { RequiredApiVersionError } from '../errors';\nimport { AppCompiler } from './AppCompiler';\nimport { ICompilerFile } from './ICompilerFile';\nimport { IParseZipResult } from './IParseZipResult';\n\nimport * as AdmZip from 'adm-zip';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as semver from 'semver';\nimport * as uuidv4 from 'uuid/v4';\nimport { IAppInfo } from '../../definition/metadata/IAppInfo';\n\nexport class AppPackageParser {\n    // tslint:disable-next-line:max-line-length\n    public static uuid4Regex: RegExp = /^[0-9a-fA-f]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/;\n    private allowedIconExts: Array<string> = ['.png', '.jpg', '.jpeg', '.gif'];\n    private appsTsDefVer: string;\n\n    constructor() {\n        this.appsTsDefVer = this.getTsDefVersion();\n    }\n\n    public async parseZip(compiler: AppCompiler, zipBase64: string): Promise<IParseZipResult> {\n        const zip = new AdmZip(Buffer.from(zipBase64, 'base64'));\n        const infoZip = zip.getEntry('app.json');\n        let info: IAppInfo;\n\n        if (infoZip && !infoZip.isDirectory) {\n            try {\n                info = JSON.parse(infoZip.getData().toString()) as IAppInfo;\n\n                if (!AppPackageParser.uuid4Regex.test(info.id)) {\n                    info.id = uuidv4();\n                    console.warn('WARNING: We automatically generated a uuid v4 id for',\n                        info.name, 'since it did not provide us an id. This is NOT',\n                        'recommended as the same App can be installed several times.');\n                }\n            } catch (e) {\n                throw new Error('Invalid App package. The \"app.json\" file is not valid json.');\n            }\n        } else {\n            throw new Error('Invalid App package. No \"app.json\" file.');\n        }\n\n        if (!semver.satisfies(this.appsTsDefVer, info.requiredApiVersion)) {\n            throw new RequiredApiVersionError(info, this.appsTsDefVer);\n        }\n\n        // Load all of the TypeScript only files\n        let tsFiles: { [s: string]: ICompilerFile } = {};\n\n        zip.getEntries().filter((entry) => entry.entryName.endsWith('.ts') && !entry.isDirectory).forEach((entry) => {\n            const norm = path.normalize(entry.entryName);\n\n            // Files which start with `.` are supposed to be hidden\n            if (norm.startsWith('.')) {\n                return;\n            }\n\n            tsFiles[norm] = {\n                name: norm,\n                content: entry.getData().toString(),\n                version: 0,\n            };\n        });\n\n        // Ensure that the main class file exists\n        if (!tsFiles[path.normalize(info.classFile)]) {\n            throw new Error(`Invalid App package. Could not find the classFile (${info.classFile}) file.`);\n        }\n\n        const languageContent = this.getLanguageContent(zip);\n\n        // Compile all the typescript files to javascript\n        const result = compiler.toJs(info, tsFiles);\n        tsFiles = result.files;\n\n        const compiledFiles: { [s: string]: string } = {};\n        Object.keys(tsFiles).forEach((name) => {\n            const norm = path.normalize(name);\n            compiledFiles[norm.replace(/\\./g, '$')] = tsFiles[norm].compiled;\n        });\n\n        // Get the icon's content\n        const iconFile = this.getIconFile(zip, info.iconFile);\n        if (iconFile) {\n            info.iconFileContent = iconFile;\n        }\n\n        return {\n            info,\n            compiledFiles,\n            languageContent,\n            implemented: result.implemented,\n            compilerErrors: result.compilerErrors,\n        };\n    }\n\n    private getLanguageContent(zip: AdmZip): { [key: string]: object } {\n        const languageContent: { [key: string]: object } = {};\n\n        zip.getEntries().filter((entry) =>\n            !entry.isDirectory &&\n            entry.entryName.startsWith('i18n/') &&\n            entry.entryName.endsWith('.json'))\n        .forEach((entry) => {\n            const entrySplit = entry.entryName.split('/');\n            const lang = entrySplit[entrySplit.length - 1].split('.')[0].toLowerCase();\n\n            let content;\n            try {\n                content = JSON.parse(entry.getData().toString());\n            } catch (e) {\n                // Failed to parse it, maybe warn them? idk yet\n            }\n\n            languageContent[lang] = Object.assign(languageContent[lang] || {}, content);\n        });\n\n        return languageContent;\n    }\n\n    private getIconFile(zip: AdmZip, filePath: string): string {\n        if (!filePath) {\n            return undefined;\n        }\n\n        const ext = path.extname(filePath);\n        if (!this.allowedIconExts.includes(ext)) {\n            return undefined;\n        }\n\n        const entry = zip.getEntry(filePath);\n\n        if (!entry) {\n            return undefined;\n        }\n\n        if (entry.isDirectory) {\n            return undefined;\n        }\n\n        const base64 = entry.getData().toString('base64');\n\n        return `data:image/${ ext.replace('.', '') };base64,${ base64 }`;\n    }\n\n    private getTsDefVersion(): string {\n        const devLocation = path.join(__dirname, '../../../package.json');\n        const prodLocation = path.join(__dirname, '../../package.json');\n\n        if (fs.existsSync(devLocation)) {\n            const info = JSON.parse(fs.readFileSync(devLocation, 'utf8'));\n            return info.version as string;\n        } else if (fs.existsSync(prodLocation)) {\n            const info = JSON.parse(fs.readFileSync(prodLocation, 'utf8'));\n            return info.version as string;\n        } else {\n            throw new Error('Could not find the Apps TypeScript Definition Package Version!');\n        }\n    }\n}\n"]}