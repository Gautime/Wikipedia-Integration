{"version":3,"sources":["src/server/logging/AppConsole.ts"],"names":[],"mappings":"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","file":"AppConsole.js","sourcesContent":["import * as stackTrace from 'stack-trace';\n\nimport { ILogEntry, ILogger, LogMessageSeverity } from '../../definition/accessors';\nimport { AppMethod } from '../../definition/metadata';\nimport { ILoggerStorageEntry } from './ILoggerStorageEntry';\n\nexport class AppConsole implements ILogger {\n    public static toStorageEntry(appId: string, logger: AppConsole): ILoggerStorageEntry {\n        return {\n            appId,\n            method: logger.getMethod(),\n            entries: logger.getEntries(),\n            startTime: logger.getStartTime(),\n            endTime: logger.getEndTime(),\n            totalTime: logger.getTotalTime(),\n            _createdAt: new Date(),\n        };\n    }\n\n    public method: AppMethod;\n    private entries: Array<ILogEntry>;\n    private start: Date;\n\n    constructor(method: AppMethod) {\n        this.method = method;\n        this.entries = new Array<ILogEntry>();\n        this.start = new Date();\n    }\n\n    public debug(...items: Array<any>): void {\n        this.addEntry(LogMessageSeverity.DEBUG, this.getFunc(stackTrace.get()), ...items);\n    }\n\n    public info(...items: Array<any>): void {\n        this.addEntry(LogMessageSeverity.INFORMATION, this.getFunc(stackTrace.get()), ...items);\n    }\n\n    public log(...items: Array<any>): void {\n        this.addEntry(LogMessageSeverity.LOG, this.getFunc(stackTrace.get()), ...items);\n    }\n\n    public warn(...items: Array<any>): void {\n        this.addEntry(LogMessageSeverity.WARNING, this.getFunc(stackTrace.get()), ...items);\n    }\n\n    public error(...items: Array<any>): void {\n        this.addEntry(LogMessageSeverity.ERROR, this.getFunc(stackTrace.get()), ...items);\n    }\n\n    public success(...items: Array<any>): void {\n        this.addEntry(LogMessageSeverity.SUCCESS, this.getFunc(stackTrace.get()), ...items);\n    }\n\n    public getEntries(): Array<ILogEntry> {\n        return Array.from(this.entries);\n    }\n\n    public getMethod(): AppMethod {\n        return this.method;\n    }\n\n    public getStartTime(): Date {\n        return this.start;\n    }\n\n    public getEndTime(): Date {\n        return new Date();\n    }\n\n    public getTotalTime(): number {\n        return this.getEndTime().getTime() - this.getStartTime().getTime();\n    }\n\n    private addEntry(severity: LogMessageSeverity, caller: string, ...items: Array<any>): void {\n        const i = items.map((v) => {\n            if (v instanceof Error) {\n                return JSON.stringify(v, Object.getOwnPropertyNames(v));\n            } else if (typeof v === 'object' && typeof v.stack === 'string' && typeof v.message === 'string') {\n                return JSON.stringify(v, Object.getOwnPropertyNames(v));\n            } else {\n                const str = JSON.stringify(v, null, 2);\n                return str ? JSON.parse(str) : str; // force call toJSON to prevent circular references\n            }\n        });\n\n        this.entries.push({\n            caller,\n            severity,\n            timestamp: new Date(),\n            args: i,\n        });\n\n        // This should be a setting? :thinking:\n        // console.log(`${ severity.toUpperCase() }:`, i);\n    }\n\n    private getFunc(stack: Array<stackTrace.StackFrame>): string {\n        let func: string = 'anonymous';\n\n        if (stack.length === 1) {\n            return func;\n        }\n\n        const frame: stackTrace.StackFrame = stack[1];\n\n        if (frame.getMethodName() === null) {\n            func = 'anonymous OR constructor';\n        } else {\n            func = frame.getMethodName();\n        }\n\n        if (frame.getFunctionName() !== null) {\n            func = `${func} -> ${frame.getFunctionName()}`;\n        }\n\n        return func;\n    }\n}\n"]}