{"version":3,"sources":["src/server/bridges/IPersistenceBridge.ts"],"names":[],"mappings":"","file":"IPersistenceBridge.js","sourcesContent":["import { RocketChatAssociationRecord } from '../../definition/metadata';\n\nexport interface IPersistenceBridge {\n    /**\n     * Purges the App's persistant storage data from the persistent storage.\n     *\n     * @argument appId the id of the app's data to remove\n     */\n    purge(appId: string): Promise<void>;\n\n    /**\n     * Creates a new persistant record with the provided data attached.\n     *\n     * @argument data the data to store in persistent storage\n     * @argument appId the id of the app which is storing the data\n     * @returns the id of the stored record\n     */\n    create(data: object, appId: string): Promise<string>;\n\n    /**\n     * Creates a new record in the App's persistent storage with the data being\n     * associated with at least one Rocket.Chat record.\n     *\n     * @argument data the data to store in the persistent storage\n     * @argument associations the associations records this data is associated with\n     * @argument appId the id of the app which is storing the data\n     * @returns the id of the stored record\n     */\n    // tslint:disable-next-line:max-line-length\n    createWithAssociations(data: object, associations: Array<RocketChatAssociationRecord>, appId: string): Promise<string>;\n\n    /**\n     * Retrieves from the persistent storage the record by the id provided.\n     *\n     * @argument id the record id to read\n     * @argument appId the id of the app calling this\n     * @returns the data stored in the persistent storage, or undefined\n     */\n    readById(id: string, appId: string): Promise<object>;\n\n    /**\n     * Retrieves the data which is associated with the provided records.\n     *\n     * @argument associations the association records to query about\n     * @argument appId the id of the app calling this\n     * @returns an array of records if they exist, an empty array otherwise\n     */\n    readByAssociations(associations: Array<RocketChatAssociationRecord>, appId: string): Promise<Array<object>>;\n\n    /**\n     * Removes the record which matches the provided id.\n     *\n     * @argument id the id of the record\n     * @argument appId the id of the app calling this\n     * @returns the data being removed\n     */\n    remove(id: string, appId: string): Promise<object>;\n\n    /**\n     * Removes any data which has been associated with the provided records.\n     *\n     * @argument associations the associations which to remove records\n     * @argument appId the id of the app calling this\n     * @returns the data of the removed records\n     */\n    removeByAssociations(associations: Array<RocketChatAssociationRecord>, appId: string): Promise<Array<object>>;\n\n    /**\n     * Updates the record in the database, with the option of creating a new one if it doesn't exist.\n     *\n     * @argument id the id of the record to update\n     * @argument data the updated data to set in the record\n     * @argument upsert whether to create if the id doesn't exist\n     * @argument appId the id of the app calling this\n     * @returns the id, whether the new one or the existing one\n     */\n    update(id: string, data: object, upsert: boolean, appId: string): Promise<string>;\n\n    /**\n     * Updates the record in the database, with the option of creating a new one if it doesn't exist.\n     *\n     * @argument associations the association records to update\n     * @argument data the updated data to set in the record\n     * @argument upsert whether to create if the id doesn't exist\n     * @argument appId the id of the app calling this\n     * @returns the id, whether the new one or the existing one\n     */\n    updateByAssociations(associations: Array<RocketChatAssociationRecord>, data: object, upsert: boolean, appId: string): Promise<string>;\n}\n"]}