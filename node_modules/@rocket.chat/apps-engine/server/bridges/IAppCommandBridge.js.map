{"version":3,"sources":["src/server/bridges/IAppCommandBridge.ts"],"names":[],"mappings":"","file":"IAppCommandBridge.js","sourcesContent":["import { ISlashCommand } from '../../definition/slashcommands';\n\n/**\n * The interface which should be implemented for the commands to be\n * registered, unregistered, and a check to see if a command exists.\n */\nexport interface IAppCommandBridge {\n    /**\n     * Checks if the provided command already exists inside of the\n     * system which is being bridged. This does not check if the app\n     * registered it but it will return whether the supplied command is\n     * already defined by something else or not.\n     *\n     * @param command the command to check if it exists\n     * @param appId the id of the app calling this\n     * @returns whether the command is already in the system\n     */\n    doesCommandExist(command: string, appId: string): boolean;\n\n    /**\n     * Enables an existing command from the bridged system. The callee\n     * must ensure that the command that's being enabled is defined by\n     * the bridged system and not another App since the bridged system\n     * will not check that.\n     *\n     * @param command the command to enable\n     * @param appId the id of the app calling this\n     */\n    enableCommand(command: string, appId: string): void;\n\n    /**\n     * Disables an existing command from the bridged system, the callee must\n     * ensure the command disabling is defined by the system and not another\n     * App since the bridged system won't check that.\n     *\n     * @param command the command which to disable\n     * @param appId the id of the app calling this\n     */\n    disableCommand(command: string, appId: string): void;\n\n    /**\n     * Changes how a system slash command behaves, allows Apps to provide\n     * different executors per system commands.\n     *\n     * @param command the modified slash command\n     * @param appId the id of the app calling this\n     */\n    modifyCommand(command: ISlashCommand, appId: string): void;\n\n    /**\n     * Restores a system slash command back to it's default behavior.\n     * This includes \"unmodifying\" a command and also enabling a\n     * command again if it was disabled.\n     *\n     * @param command the command to restore\n     * @param appId the id of the app which modified it\n     */\n    restoreCommand(command: string, appId: string): void;\n\n    /**\n     * Registers a command with the system which is being bridged.\n     *\n     * @param command the command to register\n     * @param appId the id of the app calling this\n     * @param toRun the executor which is called when the command is ran\n     */\n    registerCommand(command: ISlashCommand, appId: string): void;\n\n    /**\n     * Unregisters the provided command from the bridged system.\n     *\n     * @param command the command to unregister\n     * @param appId the id of the app calling this\n     */\n    unregisterCommand(command: string, appId: string): void;\n}\n"]}